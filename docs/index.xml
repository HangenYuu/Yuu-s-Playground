<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>H&#39;s notes</title>
<link>https://hangenyuu.github.io/h-notes/index.html</link>
<atom:link href="https://hangenyuu.github.io/h-notes/index.xml" rel="self" type="application/rss+xml"/>
<description>H&#39;s Notes on Deep Learning</description>
<generator>quarto-1.3.340</generator>
<lastBuildDate>Mon, 22 May 2023 09:24:18 GMT</lastBuildDate>
<item>
  <title>Deep Learning from the ground up - From tensor to multi-layer perceptron</title>
  <dc:creator>Pham Nguyen Hung</dc:creator>
  <link>https://hangenyuu.github.io/h-notes/posts/fastai2-p1/index.html</link>
  <description><![CDATA[ 




<p>I have finished and fallen in love with fast.ai course 1. It has been very informative. It showed me the rope about PyTorch and two important building blocks of deep learning: Embedding and Convolution. I was excited to learn that there was a part 2. In this part, Jeremy will dive deeper into the design of a deep learning framework, and implement one from the scratch the way PyTorch was designed. Here were my (verbose) writtent version for it.</p>
<section id="rules" class="level1">
<h1>Rules</h1>
<ul>
<li>Permitted at the beginning: Python and all standard libraries, matplotlib, Jupyter Notebook and nbdev.</li>
<li>After deriving something, we can use the implemented version for that.</li>
</ul>
</section>
<section id="get-the-data" class="level1">
<h1>Get the data</h1>
<p>The first thing you need to do is getting the data and visualize it in some way. The data we use is the good ol’ MNIST, available from the Internet. Based on good practice, let’s assign the URL to a variable, and prepare a directory to store the data.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle, gzip, math, os, time, shutil, matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl, matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">MNIST_URL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://github.com/mnielsen/neural-networks-and-deep-learning/blob/master/data/mnist.pkl.gz?raw=true'</span></span>
<span id="cb1-5">path_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>)</span>
<span id="cb1-6">path_data.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-7">path_gz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mnist.pkl.gz'</span></span></code></pre></div>
</div>
<p><code>pathlib.Path</code> is a handy object as you can do special operations with string to receive a new <code>Path</code>, such as the division above. It is more readable than just raw strings.</p>
<p>To get the data, let’s use <code>urllib.request.urlretrieve</code></p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> urllib.request <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urlretrieve</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> path_gz.exists(): urlretrieve(MNIST_URL, path_gz)</span></code></pre></div>
</div>
<p>The data is compressed in the <code>.pkl.gz</code> format, which can be decompressed sequentially with <code>gzip</code> and <code>pickle</code>.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path_gz, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Omit test set for simplicity</span></span>
<span id="cb3-3">    ((x_train, y_train), (x_valid, y_valid), _) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.load(f, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'latin-1'</span>)</span></code></pre></div>
</div>
</section>
<section id="visualize-the-data" class="level1">
<h1>Visualize the data</h1>
<p>Great, we have decompressed the data, but what exactly are stored inside these variables?</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">x_train, x_valid</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(array([[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]], dtype=float32),
 array([[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]], dtype=float32))</code></pre>
</div>
</div>
<p>Okay, they are <code>numpy.ndarray</code>. We are not allowed to use <code>numpy</code> yet, so we will need to convert it to list. Yep, very sorry about that. But first, uh, let’s cheat a bit by checking the shape of the arrays.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">x_train.shape, x_valid.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>((50000, 784), (10000, 784))</code></pre>
</div>
</div>
<p>Okay, it seems that the $28 $ images are flattened into 784-element arrays. Convert any of the <code>x</code>s to a list will yield a big list of lists. It is unnecessary, so let’s just take 1 data point.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(x_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-2">x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 784)</code></pre>
</div>
</div>
<p>To visualize <code>x</code>, we need to convert it into a list of 28 lists, each with 28 elements. Is there a way to do that in Python? I said “No”, but Jeremy showed that there are at least two ways</p>
<p>Firstly, we can make use of the <code>yield</code> keyword, which is used to generate iterators in Python. We want to generate 28 iterators, each containing 28 elements, from <code>x</code>. In Python, it is as simple as</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> chunks(x, size):</span>
<span id="cb10-2">    max_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x)</span>
<span id="cb10-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, max_size, size): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> x[i:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(max_size, i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>size)]</span>
<span id="cb10-4"></span>
<span id="cb10-5">mpl.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image.cmap'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span></span>
<span id="cb10-6">plt.imshow(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(chunks(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://hangenyuu.github.io/h-notes/posts/fastai2-p1/index_files/figure-html/cell-8-output-1.png" width="415" height="411"></p>
</div>
</div>
<p>Secondly, we can use <code>itertools.islice</code>.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> islice</span>
<span id="cb11-2"></span>
<span id="cb11-3">it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb11-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'First'</span>,  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(islice(it, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Second'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(islice(it, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="cb11-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Third'</span>,  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(islice(it, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>First [0.0, 0.0, 0.0, 0.0, 0.0]
Second [0.0, 0.0, 0.0, 0.0, 0.0]
Third []</code></pre>
</div>
</div>
<p>Simply, <code>islice(iterable, stop)</code> will return a new iterator from the iterable (which can be another iterator), stop at <code>stop</code>. Paired with default <code>start</code> and <code>step</code> of 0 and 1 respectively, it means that <code>islice(it, 5)</code> will return an iterator containing the first 5 values of <code>it</code>. Now we realize that doing so will also exhaust these first 5 values of <code>it</code>, so the next call will call the next 5 values of <code>it</code>. Paired with a loop, it works exactly like <code>chunks()</code> defined above.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(x)</span>
<span id="cb13-2">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(islice(it, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)), []))</span>
<span id="cb13-3">plt.imshow(img)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://hangenyuu.github.io/h-notes/posts/fastai2-p1/index_files/figure-html/cell-10-output-1.png" width="415" height="411"></p>
</div>
</div>
<p>Work like a charm. A note: that empty list passed in after the lambda function is for the sentinel argument of <code>iter()</code>, instructing <code>iter()</code> to stop when it encounters the sentinel.</p>
</section>
<section id="tensor-matrix" class="level1">
<h1>Tensor, Matrix</h1>
<p>Okay. Now we need a way to represent data that is <em>machine-readable</em>. And the machine only knows number. So we need to represent the data as numbers. We are actually already there, with our list of lists of data, each element representing the intensity of the corresponding pixel of the image. So why the need for a different representation?</p>
<p>The simplest answer is <em>efficiency</em>. Python list was designed to be a generic, dynamic data structure, hence memory and operation overhead. Machine learning requires doing linear algebra and calculus (read: matrix multiplication, one way or another, and differentiation) on the data, which is not inherently supported. There arises the need for something more specialized. And that thing was <em>tensor</em>.</p>
<p>Simply put, tensor is the generalized matrix, expanding to as many dimensions as it needs to be. It first proved to be an excellent way of representing data in physics, where it was the core of <a href="https://en.wikipedia.org/wiki/Tensor_calculus">tensor analysis</a> (yep, Albert Einstein used that). Tensor made it way into computer firstly with the development of <a href="https://en.wikipedia.org/wiki/APL_(programming_language)">APL</a> (A Programming Language) by Kenneth E. Iverson, where the central data structure is multidimensional array (yes, <code>numpy.ndarray</code> borrowed this). NumPy was most famous project to bring this to Python, paving the way for easy and flexible data analysis in Python (Pandas, sci-kitlearn, etc.). Deep Learning frameworks such as TensorFlow, JAX, or PyTorch all took from this design, with its own tensor the core data structure.</p>
<p>Anthropic’s Claude summarized the key differences as follow:</p>
<blockquote class="blockquote">
<p>Prompt: What is the different between Python list and Torch.tensor?</p>
</blockquote>
<blockquote class="blockquote">
<p>Here are the main differences between Python list and Torch.tensor:</p>
</blockquote>
<blockquote class="blockquote">
<ol type="1">
<li>Data type: Python lists can contain elements of different data types, while Tensors have a single data type. All elements of a Tensor must be floats, ints, etc.</li>
</ol>
</blockquote>
<blockquote class="blockquote">
<ol start="2" type="1">
<li>Operations: Python lists support basic operations like insert, append, pop, etc. Tensors support tensor operations like sum, mean, transpose, dot product, etc.</li>
</ol>
</blockquote>
<blockquote class="blockquote">
<ol start="3" type="1">
<li>Memory management: Python lists are managed by the Python memory manager while Tensors are managed by the PyTorch library. This makes Tensors more optimized for machine learning tasks.</li>
</ol>
</blockquote>
<blockquote class="blockquote">
<ol start="4" type="1">
<li>Shape: Python lists don’t have a fixed shape, they can have any number of elements. Tensors have a defined shape, usually 2D or higher.</li>
</ol>
</blockquote>
<blockquote class="blockquote">
<ol start="5" type="1">
<li>Parallelism: Operations on Tensors can take advantage of GPUs and multiple CPU cores, while list operations are sequential.</li>
</ol>
</blockquote>
<blockquote class="blockquote">
<ol start="6" type="1">
<li>Gradient tracking: Only Tensors can track gradients to enable backpropagation in neural networks.</li>
</ol>
</blockquote>
<blockquote class="blockquote">
<p>So in summary, Python lists are more general purpose data structures while Torch Tensors are specialized data structures optimized for machine learning and neural network tasks. Tensors provide the functionality needed for training deep learning models.</p>
</blockquote>
<p>For our case, let’s start with matrix first. We will implement a minimal object to allow the usual tensor indexing on Python list. This requires us to define the dunder method <code>__getitem__()</code></p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Matrix:</span>
<span id="cb14-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb14-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data</span>
<span id="cb14-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idxs):</span>
<span id="cb14-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data[idxs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]][idxs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb14-6"></span>
<span id="cb14-7">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Matrix(img)</span>
<span id="cb14-8">m[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>0.98828125</code></pre>
</div>
</div>
<p>Okay, cool. Now we are allowed to use <code>torch.tensor</code>. Let’s quickly convert our data to tensor with <code>map</code> and reshape an image for visualization it. Notice how easily we could do so with PyTorch.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor</span>
<span id="cb16-3">torch.set_printoptions(precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, sci_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-4"></span>
<span id="cb16-5">x_train,y_train,x_valid,y_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(tensor, (x_train,y_train,x_valid,y_valid))</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Notice the shape:'</span>, x_train.shape)</span>
<span id="cb16-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Notice the type:'</span>, x_train.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>())</span>
<span id="cb16-9"></span>
<span id="cb16-10">imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.reshape((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))</span>
<span id="cb16-11">plt.imshow(imgs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Notice the shape: torch.Size([50000, 784])
Notice the type: torch.FloatTensor</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://hangenyuu.github.io/h-notes/posts/fastai2-p1/index_files/figure-html/cell-12-output-2.png" width="415" height="411"></p>
</div>
</div>
<p>The mapping was successfully. The shape and data type all becomes PyTorch’s built-in ones. The whole <code>x_train</code> dataset can be reshaped into 10000 $28 $ quickly with <code>.reshape()</code> method and -1 indexing.</p>
<p>We now have matrix. Let’s do matrix multiplication.</p>
</section>
<section id="linear-algebra-matrix-multiplication" class="level1">
<h1>Linear Algebra: Matrix multiplication</h1>
<section id="brute-force" class="level2">
<h2 class="anchored" data-anchor-id="brute-force">Brute-force</h2>
<p>To get to multilayer perceptron, we need to able to do matrix multiplication. Let’s start from the basic first, with pen and paper.</p>
<p>Here’s an example:</p>
<p><img src="https://hangenyuu.github.io/h-notes/posts/fastai2-p1/matmul 1.png" class="img-fluid"></p>
<p>Let’s zoom in at one cell of the result matrix:</p>
<p><img src="https://hangenyuu.github.io/h-notes/posts/fastai2-p1/matmul 2.png" class="img-fluid"></p>
<p>To summarize, for each element in the result matrix, we get it by summing the product of each element in the corresponding row of the left matrix and each element in the corresponding column of the right matrix. In codes, this is translated into three nested loops:</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly initialize weights and biases as in a real layer</span></span>
<span id="cb18-3">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb18-4">bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Work with a batch of 5 first - a 3 nested loops should be slow.</span></span>
<span id="cb18-7">m1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_valid[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb18-8">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights</span>
<span id="cb18-9"></span>
<span id="cb18-10">m1.shape,m2.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(torch.Size([5, 784]), torch.Size([784, 10]))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the number of rows and columns of each matrix</span></span>
<span id="cb20-2">ar,ac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m1.shape</span>
<span id="cb20-3">br,bc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m2.shape</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># t1 is the placeholder result matrix</span></span>
<span id="cb20-6">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(ar, bc)</span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ar):         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5</span></span>
<span id="cb20-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(bc):     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 10</span></span>
<span id="cb20-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ac): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 784</span></span>
<span id="cb20-11">            t1[i,j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> m1[i,k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> m2[k,j]</span>
<span id="cb20-12"></span>
<span id="cb20-13">t1, t1.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>(tensor([[-10.94,  -0.68,  -7.00,  -4.01,  -2.09,  -3.36,   3.91,  -3.44, -11.47,  -2.12],
         [ 14.54,   6.00,   2.89,  -4.08,   6.59, -14.74,  -9.28,   2.16, -15.28,  -2.68],
         [  2.22,  -3.22,  -4.80,  -6.05,  14.17,  -8.98,  -4.79,  -5.44, -20.68,  13.57],
         [ -6.71,   8.90,  -7.46,  -7.90,   2.70,  -4.73, -11.03, -12.98,  -6.44,   3.64],
         [ -2.44,  -6.40,  -2.40,  -9.04,  11.18,  -5.77,  -8.92,  -3.79,  -8.98,   5.28]]),
 torch.Size([5, 10]))</code></pre>
</div>
</div>
<p>Let’s package this into a function:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> matmul(a,b):</span>
<span id="cb22-2">    (ar,ac),(br,bc) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.shape,b.shape</span>
<span id="cb22-3">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(ar, bc)</span>
<span id="cb22-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ar):</span>
<span id="cb22-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(bc):</span>
<span id="cb22-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ac): c[i,j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a[i,k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[k,j]</span>
<span id="cb22-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> matmul(m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.02 s ± 10 ms per loop (mean ± std. dev. of 7 runs, 5 loops each)</code></pre>
</div>
</div>
</section>
<section id="speed-up-dot-product" class="level2">
<h2 class="anchored" data-anchor-id="speed-up-dot-product">Speed-up: Dot product</h2>
<p>I want to get the objective clear: removing all of the three loops sequentially to speed things up. The first clue to do that is with dot product of two vectors. From the illustration, it is clear that each cell in result matrix is the result of the dot product between the left row vector and the right column vector. Unfortunately, we cannot use <code>torch.dot</code> yet. However, we can use <em>element-wise operation</em>, the trademark of tensor</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> matmul(a,b):</span>
<span id="cb24-2">    (ar,ac),(br,bc) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.shape,b.shape</span>
<span id="cb24-3">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(ar, bc)</span>
<span id="cb24-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ar):</span>
<span id="cb24-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(bc): c[i,j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a[i,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b[:,j]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb24-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span>
<span id="cb24-7"></span>
<span id="cb24-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> matmul(m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.67 ms ± 319 µs per loop (mean ± std. dev. of 7 runs, 5 loops each)</code></pre>
</div>
</div>
<p>Okay, now <code>torch.dot</code> is free:</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> matmul(a,b):</span>
<span id="cb26-2">    (ar,ac),(br,bc) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.shape,b.shape</span>
<span id="cb26-3">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(ar, bc)</span>
<span id="cb26-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ar):</span>
<span id="cb26-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(bc): c[i,j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.dot(a[i,:], b[:,j])</span>
<span id="cb26-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span>
<span id="cb26-7"></span>
<span id="cb26-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> matmul(m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.27 ms ± 251 µs per loop (mean ± std. dev. of 7 runs, 5 loops each)</code></pre>
</div>
</div>
</section>
<section id="speed-up-broadcasting" class="level2">
<h2 class="anchored" data-anchor-id="speed-up-broadcasting">Speed-up: Broadcasting</h2>
<p>The next clue is another trademark of tensor: <strong>broadcasting</strong>, which allows tensors of different shapes to be multiplied together. This is the trademark of tensors, so make some time to familiarize yourself with the rules from <a href="https://numpy.org/doc/stable/user/basics.broadcasting.html">NumPy documentation</a>.</p>
<p>For demonstration, it is better to refer to the <a href="https://nbviewer.org/github/fastai/course22p2/blob/master/nbs/">original notebook</a>. I just want to mention two things. Firstly, <code>.unsqueeze()</code> and <code>None</code> indexing. Simply put, we can create a <em>unit dimension</em> in an array by using <code>.unsqueeze()</code> or passing in the special keyword <code>None</code> inside the indexing brackets.</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>])</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The first dimension:'</span>, c.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), c[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :])</span>
<span id="cb28-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The second dimension:'</span>, c.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), c[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb28-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'We can skip trailing ":"'</span>, c[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb28-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'We can also pass in "..."'</span>, c[..., <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The first dimension: tensor([[10., 20., 30.]]) tensor([[10., 20., 30.]])
The second dimension: tensor([[10.],
        [20.],
        [30.]]) tensor([[10.],
        [20.],
        [30.]])
We can skip trailing ":" tensor([[10., 20., 30.]])
We can also pass in "..." tensor([[10.],
        [20.],
        [30.]])</code></pre>
</div>
</div>
<p>Secondly, that broadcasting compare array dimensions from <em>right to left</em>. This can lead to behavior such as this:</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">c[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c[:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>tensor([[100., 200., 300.],
        [200., 400., 600.],
        [300., 600., 900.]])</code></pre>
</div>
</div>
<p><img src="https://hangenyuu.github.io/h-notes/posts/fastai2-p1/matmul 3.png" class="img-fluid"></p>
<p>Anyway, with broadcasting, we can now calculate the result matrix one row at a time and skip another loop:</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> matmul(a,b):</span>
<span id="cb32-2">    (ar,ac),(br,bc) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.shape,b.shape</span>
<span id="cb32-3">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(ar, bc)</span>
<span id="cb32-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ar):</span>
<span id="cb32-5">        c[i]   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a[i,:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb32-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span>
<span id="cb32-7"></span>
<span id="cb32-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> matmul(m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>357 µs ± 141 µs per loop (mean ± std. dev. of 7 runs, 5 loops each)</code></pre>
</div>
</div>
<p>At this point, we basically arrive at matrix multiplication. However, let’s up the amp a bit and (re)introduce Einstein.</p>
</section>
<section id="einstein-summation" class="level2">
<h2 class="anchored" data-anchor-id="einstein-summation">Einstein summation</h2>
<blockquote class="blockquote">
<p><a href="https://ajcr.net/Basic-guide-to-einsum/">Einstein summation</a> (<code>einsum</code>) is a compact representation for combining products and sums in a general way. The key rules are:</p>
<ul>
<li><p>Repeating letters between input arrays means that values along those axes will be multiplied together.</p></li>
<li><p>Omitting a letter from the output means that values along that axis will be summed.</p></li>
</ul>
</blockquote>
<p>Example:</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">m1.shape, m2.shape</span>
<span id="cb34-2"></span>
<span id="cb34-3">mr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.einsum(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ik,kj-&gt;ikj'</span>, m1, m2)</span>
<span id="cb34-4">mr.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>torch.Size([5, 784, 10])</code></pre>
</div>
</div>
<p>To use <code>torch.einsum</code>, we need to pass in a string telling the operation we want to achieve. The string above means “multiplying each column of <code>m1</code> by <code>m2</code>”. Notice that we can sum the result matrix along the first dimension to get the result matrix.</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">mr.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>tensor([[-10.94,  -0.68,  -7.00,  -4.01,  -2.09,  -3.36,   3.91,  -3.44, -11.47,  -2.12],
        [ 14.54,   6.00,   2.89,  -4.08,   6.59, -14.74,  -9.28,   2.16, -15.28,  -2.68],
        [  2.22,  -3.22,  -4.80,  -6.05,  14.17,  -8.98,  -4.79,  -5.44, -20.68,  13.57],
        [ -6.71,   8.90,  -7.46,  -7.90,   2.70,  -4.73, -11.03, -12.98,  -6.44,   3.64],
        [ -2.44,  -6.40,  -2.40,  -9.04,  11.18,  -5.77,  -8.92,  -3.79,  -8.98,   5.28]])</code></pre>
</div>
</div>
<p>This is equivalent to the notation of matrix multiplication</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">torch.einsum(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ik,kj-&gt;ij'</span>, m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>tensor([[-10.94,  -0.68,  -7.00,  -4.01,  -2.09,  -3.36,   3.91,  -3.44, -11.47,  -2.12],
        [ 14.54,   6.00,   2.89,  -4.08,   6.59, -14.74,  -9.28,   2.16, -15.28,  -2.68],
        [  2.22,  -3.22,  -4.80,  -6.05,  14.17,  -8.98,  -4.79,  -5.44, -20.68,  13.57],
        [ -6.71,   8.90,  -7.46,  -7.90,   2.70,  -4.73, -11.03, -12.98,  -6.44,   3.64],
        [ -2.44,  -6.40,  -2.40,  -9.04,  11.18,  -5.77,  -8.92,  -3.79,  -8.98,   5.28]])</code></pre>
</div>
</div>
<p>So we can replace everything with a <code>torch.einsum</code> call:</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> matmul(a,b): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.einsum(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ik,kj-&gt;ij'</span>, a, b)</span>
<span id="cb40-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> _<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>matmul(m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The slowest run took 4.03 times longer than the fastest. This could mean that an intermediate result is being cached.
51.5 µs ± 32.5 µs per loop (mean ± std. dev. of 7 runs, 5 loops each)</code></pre>
</div>
</div>
<p>Having come to this point, let’s introduce <code>torch</code> predefined operations:</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> _<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.matmul(m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The slowest run took 11.13 times longer than the fastest. This could mean that an intermediate result is being cached.
16.5 µs ± 22.8 µs per loop (mean ± std. dev. of 7 runs, 5 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> _<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>m1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>m2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The slowest run took 17.03 times longer than the fastest. This could mean that an intermediate result is being cached.
31.6 µs ± 42.8 µs per loop (mean ± std. dev. of 7 runs, 5 loops each)</code></pre>
</div>
</div>
</section>
</section>
<section id="calculus-differentiation-and-chain-rule" class="level1">
<h1>Calculus: Differentiation and Chain Rule</h1>
<p>Okay, great. We have built the linear algebra needed for deep learning, specifically, for the forward pass. For the backward pass, we need to do some calculus - calculating the differentiation.</p>
<p>Great! But <em>why differentiation in the first place</em>?</p>
<p>At this point, it is best if we agree on a general answer to <em>What’s exactly is a (machine learning) model?</em></p>
<p>Simply, we have a black box, or a “magic API” as Jeremy called it, where we pass inputs in and receive outputs out close to the way we want. But more often than not, we will not know the perfect parameters for the model, so we will need to start with random parameters and update them along. But what is the corect direction to do so? We will need a <em>metric</em> to measure progress. Hence, the loss function is introduced. But well, how do we construct such a function?</p>
<p>This is the time I introduce the topic of <em>Optimization problem</em>, where the goal is to find the maximum or minimum value of a variable. A technique, or even <em>the</em> technique that we can use is <a href="https://en.wikipedia.org/wiki/Newton%27s_method">Newton method</a>. It was first used to solve some equation <img src="https://latex.codecogs.com/png.latex?f(x)=0">. Let’s say <img src="https://latex.codecogs.com/png.latex?f(x)"> is complex so it is tedious to solve direcly. We can guess the initial and then iteratively calculate a better one with the formula: <img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D%20=%20x_n%20-%20%5Cfrac%7Bf(x_n)%7D%7Bf'(x_n)%7D"></p>
<p>The intuition is that for a(n infinitesimally) small range around any value, the function can be approximated to be linear (within some error). For each iteration of Newton’s method, we approximate the function as a linear one. Of course, for guesses far from a true root, it wil be incorrect. However, following the gradient, we will get to the next guess that is closer to the root than before. If we keep repeating, we will eventually get to the real root, or a very close approximation. And there it is!</p>
<p><img src="https://hangenyuu.github.io/h-notes/posts/fastai2-p1/NewtonIteration_Ani.gif" class="img-fluid"></p>
<p>For optimization problem, it is not <img src="https://latex.codecogs.com/png.latex?f(x)=0">, but <img src="https://latex.codecogs.com/png.latex?f'(x)=0">. We can use the same technique, but modify the equation to. <img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D%20=%20x_n%20-%20%5Cfrac%7Bf'(x_n)%7D%7Bf''(x_n)%7D"></p>
<p>Going to multidimensional matrix, the equation becomes: <img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D%20=%20x_n%20-%20H%5E%7B-1%7D%20%5Cnabla%20f(x_n)"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?H"> is the Hessian matrix, the second derivative of <img src="https://latex.codecogs.com/png.latex?f(x)">. This is the core of Newton’s method. However, it is not used in practice because of the computational cost of <em>calculating the Hessian matrix</em> and then <em>inverse it</em> (trust me, it’s not a pleasant experience, and I tried with just two dimensions). Instead, we use a parameter called <em>learning rate</em> in gradient descent, which is essentially a small constant to replace the Hessian. The equation becomes: <img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D%20=%20x_n%20-%20%5Calpha%20%5Cnabla%20f(x_n)"></p>
<p>Yes, we are using a constant to estimate the Hessian. It is not as accurate, but it is much faster and more straightforward to implement. And with the introduction of momentums, regularizations, learning rate scheduler, etc., we can achieve great result <a href="https://arxiv.org/abs/1708.07120">fast</a> without the need for the Hessian.</p>
<p>Enough with the history and theory.</p>
<section id="forward-pass" class="level2">
<h2 class="anchored" data-anchor-id="forward-pass">Forward pass</h2>
<p>Let’s start with a simple model: 2 linear layers, 1 ReLU activation. Ignore the softmax for now.</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">batch_size, feature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.shape</span>
<span id="cb46-2">classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb46-3">num_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> </span></code></pre></div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(feature,num_hidden)</span>
<span id="cb47-2">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(num_hidden)</span>
<span id="cb47-3">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(num_hidden,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-4">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-5"></span>
<span id="cb47-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> lin(x, w, b):</span>
<span id="cb47-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb47-8"></span>
<span id="cb47-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> relu(x):</span>
<span id="cb47-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x.clamp_min(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>)</span>
<span id="cb47-11"></span>
<span id="cb47-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> model(xb):</span>
<span id="cb47-13">    l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(xb, w1, b1)</span>
<span id="cb47-14">    l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relu(l1)</span>
<span id="cb47-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> lin(l2, w2, b2)</span>
<span id="cb47-16"></span>
<span id="cb47-17">yhat_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x_train)</span>
<span id="cb47-18">yhat_train.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>torch.Size([50000, 1])</code></pre>
</div>
</div>
<p>Perfect! Now we need something to measure the performance of the model. Ideally, this number should involve the final output of the model and the true label to use in the backward pass later. The most straightforward is MSE loss.</p>
<p>The formula for this case is: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(y_i%20-%20%5Chat%7By_i%7D)%5E2"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?n"> is the number of samples, <img src="https://latex.codecogs.com/png.latex?y_i"> is the true label, and <img src="https://latex.codecogs.com/png.latex?%5Chat%7By_i%7D"> is the predicted label.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">(yhat_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y_train).shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>torch.Size([50000, 50000])</code></pre>
</div>
</div>
<p>Huh? The shape received is incorrect. We are expecting <code>torch.Size([50000])</code> but receive <code>torch.Size([50000, 50000])</code> instead. The likeliest cause is a difference in dimension. Let’s check the shape of <code>yhat_train</code> and <code>y_train</code>:</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">yhat_train.shape, y_train.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>(torch.Size([50000, 1]), torch.Size([50000]))</code></pre>
</div>
</div>
<p>Aha! There is a trailing dimension in <code>yhat_train</code>. We can fix this by using <code>squeeze</code>:</p>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">yhat_train[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape, yhat_train.squeeze().shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>(torch.Size([50000]), torch.Size([50000]))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">(yhat_train.squeeze()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y_train).shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>torch.Size([50000])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mse(yhat, y):</span>
<span id="cb57-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (yhat.squeeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span>
<span id="cb57-3">mse(yhat_train, y_train)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>tensor(922.41)</code></pre>
</div>
</div>
</section>
<section id="backward-pass" class="level2">
<h2 class="anchored" data-anchor-id="backward-pass">Backward pass</h2>
<p>To do backward pass, we need to calculate gradient. This example is easy - I can do it with pen and paper and code the formulae in. However, to scale up to bigger network, we need a more general way called <em>computational graph</em>.</p>
<p>A framework such as PyTorch will have mechanism (<code>autograd</code>) behind the scene to keep track of the computational graph. Afterwards, it will calculate the gradient of the parameters to the loss function. The gradient is not calculated at once, but <em>sequentially</em> in the reverse order of the forward pass, making use of the chain rule to reduce operations for each parameter. This is called <em>backpropagation</em>. To emphasize, yes, the coolest term in the history of deep learning is just <em>using chain rule to calculate gradient sequentially in the reverse order</em>.</p>
<blockquote class="blockquote">
<p>To find out more about backpropagation, the most complete resource is a lecture from a university such as Michigan or Stanford (e.g., <a href="https://youtu.be/d14TUNcbn1k">video</a>, <a href="https://cs231n.github.io/optimization-2/">notes</a>). You may also want to check the PyTorch documentation for <a href="https://pytorch.org/docs/stable/notes/autograd.html">autograd</a>.</p>
</blockquote>
<p>Anyway, we are yet to have an autograd framework, so for this example, let’s use pen and paper. We will calculate the gradient of the loss function with respect to each parameter.</p>
<p><strong>Note:</strong> The whole phrase is “gradient of the loss function with respect to a parameter <img src="https://latex.codecogs.com/png.latex?x">”, which is usually referred to just as “gradient of <img src="https://latex.codecogs.com/png.latex?x">”. This seems to be an implicit rule in the field, so I will follow.</p>
<section id="gradient-of-mse-loss" class="level3">
<h3 class="anchored" data-anchor-id="gradient-of-mse-loss">Gradient of MSE loss</h3>
<p>From <img src="https://latex.codecogs.com/png.latex?%0AJ%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(y_i%20-%20%5Chat%7By_i%7D)%5E2,%0A"> <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Chat%7By%7D%7D%20=%20%5Cfrac%7B2%7D%7Bn%7D%20(y%20-%20%5Chat%7By%7D)%0A"> with <img src="https://latex.codecogs.com/png.latex?y"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D"> matrices.</p>
<p>This will give the first gradient for the backward pass. We will use this to calculate the gradient of the next layer. Recall that <img src="https://latex.codecogs.com/png.latex?%5Chat%7By_i%7D"> is also the activation of the last linear layer (say, <img src="https://latex.codecogs.com/png.latex?n">): <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D%20=%20a%5Ej%20=%20w%5Ej%20%5Ctimes%20a%5E%7Bj-1%7D%20+%20w%5Ej">. Generally, <em>the input to the next layer is the activation of the current layer</em>. The formula we will derive shortly shows that we will need the output of the layer to calculate the gradient of the input to the layer (which happens to be the activation of the previous layer, hence required to calculate the graidnet of the input to the previous layer (which happens to be…)…).</p>
</section>
<section id="gradient-of-linear-layer" class="level3">
<h3 class="anchored" data-anchor-id="gradient-of-linear-layer">Gradient of linear layer</h3>
<p>From <img src="https://latex.codecogs.com/png.latex?%0Aa%5Ej%20=%20w%5Ej%20%5Ctimes%20a%5E%7Bj-1%7D%20+%20b%5Ej,%20%5C%5C%0A"> The gradients are: <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20w%5Ej%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5Ej%7D%20%5Ctimes%20%5Cfrac%7B%5Cpartial%20a%5Ej%7D%7B%5Cpartial%20w%5Ej%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5Ej%7D%20%5Ctimes%20a%5E%7Bj-1%7D,%0A"> <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5E%7Bj-1%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5Ej%7D%20%5Ctimes%20%5Cfrac%7B%5Cpartial%20a%5Ej%7D%7B%5Cpartial%20a%5E%7Bj-1%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5Ej%7D%20%5Ctimes%20w%5E%7Bj%7D,%0A"> <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20b%5E%7Bj%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5Ej%7D%20%5Ctimes%20%5Cfrac%7B%5Cpartial%20a%5Ej%7D%7B%5Cpartial%20b%5E%7Bj%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5Ej%7D%0A"> In Python, we will store the gradient as an attribute of the matrix itself. This is similar to PyTorch’s behaviors. The attribute <code>grad</code> is taken, so let’s use <code>g</code> instead.</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> lin_grad(inp, out, w, b):</span>
<span id="cb59-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .g must have the same shape as the original matrix</span></span>
<span id="cb59-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inp has shape (i, j), w has shape (j, k), so out has shape (i, k)</span></span>
<span id="cb59-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to get back to (i, j) from (i, k), we need shape (k, j), so we transpose w</span></span>
<span id="cb59-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This analysis based on shape is not correct as I obviously do not care</span></span>
<span id="cb59-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># about actual values here, but is often enought to get the correct answer </span></span>
<span id="cb59-7">    inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> w.t()</span>
<span id="cb59-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For w.g, it is getting (j, k) from (i, j) and (i, k)</span></span>
<span id="cb59-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Besides einsum, from broadcasting rule, we need to add a unit axis at the</span></span>
<span id="cb59-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># end of inp and at axis 1 (zero-indexing) of out, multiply to get (i, j, k),</span></span>
<span id="cb59-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and sum along the first axis</span></span>
<span id="cb59-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># w.g = (inp.unsqueeze(-1) * out.g.unsqueeze(1)).sum(0)</span></span>
<span id="cb59-13">    w.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.einsum(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ij,ik-&gt;jk'</span>, inp, out.g)</span>
<span id="cb59-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For b.g, the shape is just (k) because of broadcasting, so sum out.g along</span></span>
<span id="cb59-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the first axis.</span></span>
<span id="cb59-16">    b.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.g.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb59-17"></span>
<span id="cb59-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward_and_backward(inp, targ):</span>
<span id="cb59-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward pass:</span></span>
<span id="cb59-20">    l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(inp, w1, b1)</span>
<span id="cb59-21">    l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relu(l1)</span>
<span id="cb59-22">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(l2, w2, b2)</span>
<span id="cb59-23">    diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>targ</span>
<span id="cb59-24">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> diff.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span>
<span id="cb59-25">    </span>
<span id="cb59-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward pass:</span></span>
<span id="cb59-27">    out.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>diff[:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> inp.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb59-28">    lin_grad(l2, out, w2, b2)</span>
<span id="cb59-29">    l1.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l2.g</span>
<span id="cb59-30">    lin_grad(inp, l1, w1, b1)</span>
<span id="cb59-31"></span>
<span id="cb59-32">forward_and_backward(x_train, y_train)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testing - from Jeremy</span></span>
<span id="cb60-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.test <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> test_close</span>
<span id="cb60-3"></span>
<span id="cb60-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_grad(x): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x.g.clone()</span>
<span id="cb60-5">chks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w1,w2,b1,b2,x_train</span>
<span id="cb60-6">grads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w1g,w2g,b1g,b2g,ig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(get_grad, chks))</span>
<span id="cb60-7"></span>
<span id="cb60-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mkgrad(x): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x.clone().requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb60-9">ptgrads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w12,w22,b12,b22,xt2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(mkgrad, chks))</span>
<span id="cb60-10"></span>
<span id="cb60-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(inp, targ):</span>
<span id="cb60-12">    l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(inp, w12, b12)</span>
<span id="cb60-13">    l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relu(l1)</span>
<span id="cb60-14">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(l2, w22, b22)</span>
<span id="cb60-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mse(out, targ)</span>
<span id="cb60-16"></span>
<span id="cb60-17">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward(xt2, y_train)</span>
<span id="cb60-18">loss.backward()</span>
<span id="cb60-19"></span>
<span id="cb60-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a,b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(grads, ptgrads): test_close(a, b.grad, eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span></code></pre></div>
</div>
<p>No expeption was raised, which means that our codes worked correctly! We successfully created an MLP!</p>
<p><em>The formulae for the optimization problems were referenced from Chapra, &amp; Canale, R. P. (2015). Numerical methods for engineers (Seventh edition.). McGraw-Hill Education</em></p>


</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <category>From scratch</category>
  <guid>https://hangenyuu.github.io/h-notes/posts/fastai2-p1/index.html</guid>
  <pubDate>Mon, 22 May 2023 09:24:18 GMT</pubDate>
</item>
<item>
  <title>A micro AI tool</title>
  <dc:creator>Pham Nguyen Hung</dc:creator>
  <link>https://hangenyuu.github.io/h-notes/posts/hackathon-report/index.html</link>
  <description><![CDATA[ 




<p>On the weekends of 25-26/02 I had the pleasure(?) of attending the <a href="https://intuition.ieeentu.com/">Intuition</a> hackathon hosted by the NTU branch of IEEE with <a href="https://www.linkedin.com/in/hoang-phan-nhat-8a3892191/">Phan Nhat Hoang</a> a.k.a John Phan. We did not win any prize this time (yes, there was a last time that we won, which deserved a post of it all, but not today). Consider this post the debrief for the two days.</p>
<p>First, here is the <a href="https://intuition-v9-0.devpost.com/project-gallery">link</a> to the gallery of the hackathon. Take some time to browse through it and you will notice that at least half of them mentioned GPT-3. Our project, <a href="https://devpost.com/software/summed-is-all-you-need">SumMed</a>, did, too. And we were not alone. After OpenAI released the APIs for their GPT 3.5 (<code>davinci</code>) and DALL·E 2 model, there swiftly spawned a generation of pico AI start-ups that made use of the platform to build products that bring in good income. This was mentioned in Data Machina’s <a href="https://datamachina.substack.com/p/data-machina-190">Newsletter 190</a>, together with a bag of tools termed “<em>Modern AI Stack</em>” by Carlos.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/hackathon-report/Data Machina 190.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><em>Here is the full list for those who wonder. <a href="https://datamachina.substack.com/p/data-machina-190">Source</a></em></figcaption>
</figure>
</div>
<p>It was amazing how quickly people in tech caught on to something interesting. Or perhaps it was the ability to turn almost everything into interesting stuff. Anyway, I want to mention the newsletter first because it was our first mistake. We were not up with the news. Had only we known more about the trend in the field, we could have utilized more tools to save the work. As we were about to see, the biggest regret would be the front-end, which Hoang spent most of his time to write with React.js, while <a href="https://devpost.com/software/archmed">another team</a> accomplished nearly the same thing and some more with <a href="https://streamlit.io/">Streamlit</a>. And it was also worth mentioning that neither of us know how to use Streamlit - Hoang fell into React.js out of habit. And we just straight up focused on OpenAI technology instead of considering others, with two worth mentioning being <a href="https://huggingface.co/">HuggingFace</a> and <a href="https://www.hpc-ai.tech/blog/colossal-ai-chatgpt">Colossal-AI</a>. There was no time, and we were not knowledgeable enough to utilize the tools.</p>
<p>Before moving on, it is worth mentioning that the “mistake” I wrote above needs reading as “mistake in the context of a hackathon”. When you are in such a rush (&lt;24 hours) and you are not a master learner who can acquire tools and integrate in the project at will (yet), you will need to prepare everything way before the event. I did not do that, because these skills were not the highest in my long-term priority yet (guess so for Hoang). A hackathon seemed big and important on the resume (especially when you are deep into it and do not have any sleep for the past 24 hours), but the long-term vision is always more important and always comes first.</p>
<p>Now that is enough rambling. Onto the actual stuff.</p>
<section id="before-summed" class="level1">
<h1>Before SumMed</h1>
<p>The hackathon was divided into 3 <a href="https://intuition.ieeentu.com/#tracks">tracks</a>: Healthcare track, FinTech track, and an Open track that also cover the two. We chose Healthcare track, with the lengthier problem statement.</p>
<p><img src="https://hangenyuu.github.io/h-notes/posts/hackathon-report/iNTUition v9.0.png" class="img-fluid"></p>
<p>The requirement was clear: zoom onto “an AI tool that can automatically convert research articles into multimodal formats such as PowerPoint, blogs, and infographic posters.” Anybody who caught wind of GPT-3 would think about calling an API together with the paper content to retrieve various summaries for the parts of the paper and create stuff (slides, infographic, or blog post) from them. Well, such was the majority of the submissions. For some reason, we got tunnel vision, did not realize this, and got stuck with a project that resembled everybody else. Eventually, the selection for winner became the selection for the prototype that was closer to the requirements (<a href="https://github.com/jiawen3131/Hacknwhack">here</a>).</p>
<p>Back to our product, it all started some time ago when Hoang introduced me to the concept of DocumentQA. This started with the discovery of the model to reason <em>in-context</em>. This is something that is unique to large language models (LLMs). Simply put, if we feed the model a context i.e.&nbsp;background information <em>that it has never seen before</em> together with a format of conversation that we desire, the model can immediately adapt to the format we want, and use the background information as the main source of knowledge to answer our prompt.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/hackathon-report/GPT 3 SQuADv2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><em>An example from the <a href="https://arxiv.org/pdf/2005.14165.pdf">GPT-3 research paper</a></em></figcaption>
</figure>
</div>
<p>This means that we can take a pre-trained LLM, which will act as a <em>document reader</em> and augment it with a <em>document retriever</em> to form a DocumentQA pipeline. You ask, the retriever performs preliminary search and takes out the relevant one to feed into the reader together with your question, and the reader answers after reading the document. A most notable example is <a href="https://github.com/facebookresearch/DrQA">DrQA</a>. For the particular case of OpenAI <a href="https://platform.openai.com/docs/model-index-for-researchers">GPT-3.5</a> (<code>text-davinci-003</code>), there exists two applications available as retriever for the model: <a href="https://langchain.readthedocs.io/en/latest/">LangChain</a> and <a href="https://gpt-index.readthedocs.io/en/latest/">LlamaIndex (GPT Index)</a>. We started simply with a Discord chatbot that used LlamaIndex to read an attachment (PDF, HTML, etc.) and answer a question that you send. I have not created a GitHub repo for it, but here is the <a href="https://replit.com/@HangenYuu/PoliteWavyReciprocal">Repl</a>.</p>
<p>Because of this toy project, we got tunnel vision into creating a chatbot for QA over a research paper, which was far from the point. We shifted gear after a Dr.&nbsp;from MSD set me straight about the project, and came up with SumMed.</p>
</section>
<section id="enter-summed" class="level1">
<h1>Enter SumMed</h1>
<p>SumMed supported 3 features:</p>
<ol type="1">
<li>Extract and display key information about a research paper.</li>
<li>Extract and display all tables, figures, and charts from a research paper.</li>
<li>Of course, a chatbot for QA over a researcher paper.</li>
</ol>
<p>The diagram of the application is simple</p>
<p><img src="https://hangenyuu.github.io/h-notes/posts/hackathon-report/SumMed diagram.png" class="img-fluid"></p>
<p>Hoang was in charge of the intricate detail of the front-end and Flask app, which could be viewed in client folder of repo (again, <a href="https://github.com/JohnToro-CZAF/MedSum/tree/main/client">here</a>). I was in charge of the model part of the back-end, and I was not a React.js pro, would not try to show you what Hoang had done. Instead, I will walk you through the back-end models: GPT-3.5 and Detectron2.</p>
<blockquote class="blockquote">
<p>Note: Apparently, catching wind of this blog post, Hoang has refactored the codes. The codes in the post are <code>DocLayout.py</code>, <code>DocReader.py</code>, <code>DocSummarizer.py</code> in the <code>server</code> folder.</p>
</blockquote>
</section>
<section id="code-walkthrough" class="level1">
<h1>Code walkthrough</h1>
<section id="doclayout.py" class="level2">
<h2 class="anchored" data-anchor-id="doclayout.py"><code>DocLayout.py</code></h2>
<p>First, the whole file:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pdf2image</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> layoutparser <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> lp</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DocLayout(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lp.Detectron2LayoutModel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lp://PubLayNet/mask_rcnn_X_101_32x8d_FPN_3x/config'</span>,</span>
<span id="cb1-9">                                    extra_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MODEL.ROI_HEADS.SCORE_THRESH_TEST"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>],</span>
<span id="cb1-10">                                    label_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Table"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Figure"</span>})</span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ocr_agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lp.TesseractAgent(languages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eng'</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract_pdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, file_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb1-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" From a local file pdf file, extract the title, text, tables and figures</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            file_name (str): path to the pdf file</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            title (str): title of the paper</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Paper (str): text of the paper</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            table_by_page (dict(list)): dictionary of tables by page, each page has a list of tables, represent by 3D numpy array</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            figure_by_page (dict(list)): dictionary of figures by page, each page has a list of figures, represent by 3D numpy array</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb1-23">        list_of_pages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pdf2image.convert_from_path(file_name)</span>
<span id="cb1-24">        images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.asarray(page) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> page <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> list_of_pages]</span>
<span id="cb1-25">        image_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(images[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb1-26"></span>
<span id="cb1-27">        header_blocks, text_blocks, table_blocks, figure_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._detect_element(images)</span>
<span id="cb1-28"></span>
<span id="cb1-29">        title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_title(image_width, images, header_blocks)</span>
<span id="cb1-30">        Paper <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_text_info(image_width, images, text_blocks)</span>
<span id="cb1-31">        table_by_page, figure_by_page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_table_n_figure(image_width, images, table_blocks, figure_blocks)</span>
<span id="cb1-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Currently we dont care about the order of the figures or tables returned</span></span>
<span id="cb1-33">        tables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._general_by_table_to_list(table_by_page)</span>
<span id="cb1-34">        figures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._general_by_table_to_list(figure_by_page)</span>
<span id="cb1-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> title, Paper, tables, figures</span>
<span id="cb1-36">    </span>
<span id="cb1-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _general_by_table_to_list(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, general_by_page: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb1-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [general <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> general_by_page.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> general <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> general_by_page[i]]</span>
<span id="cb1-39">    </span>
<span id="cb1-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _detect_element(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, images):</span>
<span id="cb1-41">        types <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Title'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Text'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Table'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Figure'</span>]</span>
<span id="cb1-42">        type_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-43">            t: defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> types</span>
<span id="cb1-44">        }</span>
<span id="cb1-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(images)):</span>
<span id="cb1-46">            layout_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.detect(images[i])</span>
<span id="cb1-47">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> types:</span>
<span id="cb1-48">                type_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lp.Layout([b <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layout_result <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> b.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>t])</span>
<span id="cb1-49">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(type_block) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-50">                    type_blocks[t][i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> type_block</span>
<span id="cb1-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> type_blocks.values()</span>
<span id="cb1-52">    </span>
<span id="cb1-53">    </span>
<span id="cb1-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _extract_title(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_width, images, header_blocks):</span>
<span id="cb1-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Extract the title of the article from several headers</span></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb1-58">        first_page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(header_blocks.keys())</span>
<span id="cb1-59">        segment_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_page(first_page, image_width, images, header_blocks)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-60">        title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ocr_agent.detect(segment_title)</span>
<span id="cb1-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> title</span>
<span id="cb1-62">    </span>
<span id="cb1-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _extract_text_info(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_width, images, text_blocks):</span>
<span id="cb1-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns all the text in the article</span></span>
<span id="cb1-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb1-67">        Paper <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb1-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> page_id <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> text_blocks:</span>
<span id="cb1-69">            text_block_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_page(page_id, image_width, images, text_blocks)</span>
<span id="cb1-70">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> block <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> text_block_images:</span>
<span id="cb1-71">                text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ocr_agent.detect(block).strip()</span>
<span id="cb1-72">                Paper <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span></span>
<span id="cb1-73">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Paper</span>
<span id="cb1-74"></span>
<span id="cb1-75">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _extract_table_n_figure(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_width, images, table_blocks, figure_blocks):</span>
<span id="cb1-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Extract 3D numpy array of tables and figures from deteced layout</span></span>
<span id="cb1-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb1-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            image_width (int): width of image</span></span>
<span id="cb1-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            images (_type_): _description_</span></span>
<span id="cb1-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            table_blocks (_type_): _description_</span></span>
<span id="cb1-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            figure_blocks (_type_): _description_</span></span>
<span id="cb1-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb1-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            table_by_page, figure_by_page (dict(list)): 3D numpy array of tables and figures by page</span></span>
<span id="cb1-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb1-85">        </span>
<span id="cb1-86">        table_by_page, figure_by_page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>), defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span>
<span id="cb1-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> page_id <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> table_blocks:</span>
<span id="cb1-88">            results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_page(page_id, image_width, images, table_blocks )</span>
<span id="cb1-89">            table_by_page[page_id] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span>
<span id="cb1-90">        </span>
<span id="cb1-91">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> page_id <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> figure_blocks:</span>
<span id="cb1-92">            results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_page(page_id, image_width, images, figure_blocks)</span>
<span id="cb1-93">            figure_by_page[page_id] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span>
<span id="cb1-94">        </span>
<span id="cb1-95">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> table_by_page, figure_by_page</span>
<span id="cb1-96"></span>
<span id="cb1-97">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _extract_page(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, page_id, image_width, images, general_blocks):</span>
<span id="cb1-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" </span></span>
<span id="cb1-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Get a list of 3D array numpy image of tables and figures, or text from a page</span></span>
<span id="cb1-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb1-101">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-102">        left_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lp.Interval(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, image_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>).put_on_canvas(images[page_id])</span>
<span id="cb1-103">        left_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> general_blocks[page_id].filter_by(left_interval, center<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)._blocks</span>
<span id="cb1-104">        left_blocks.sort(key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> b: b.coordinates[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb1-105"></span>
<span id="cb1-106">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort element ID of the right column based on y1 coordinate</span></span>
<span id="cb1-107">        right_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [b <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> general_blocks[page_id] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> left_blocks]</span>
<span id="cb1-108">        right_blocks.sort(key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> b: b.coordinates[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb1-109"></span>
<span id="cb1-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort the overall element ID starts from left column</span></span>
<span id="cb1-111">        general_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lp.Layout([b.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx, b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(left_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> right_blocks)])</span>
<span id="cb1-112"></span>
<span id="cb1-113">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop image around the detected layout</span></span>
<span id="cb1-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> block <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> general_block:</span>
<span id="cb1-115">            segment_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (block</span>
<span id="cb1-116">                                .pad(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-117">                                .crop_image(images[page_id]))</span>
<span id="cb1-118">            results.append(segment_image)</span>
<span id="cb1-119"></span>
<span id="cb1-120">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> results</span></code></pre></div>
<p>Let’s dissect the codes.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pdf2image</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> layoutparser <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> lp</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DocLayout(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lp.Detectron2LayoutModel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lp://PubLayNet/mask_rcnn_X_101_32x8d_FPN_3x/config'</span>,</span>
<span id="cb2-9">                                    extra_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MODEL.ROI_HEADS.SCORE_THRESH_TEST"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>],</span>
<span id="cb2-10">                                    label_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Table"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Figure"</span>})</span>
<span id="cb2-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ocr_agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lp.TesseractAgent(languages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eng'</span>)</span></code></pre></div>
<p>The star of the show is <a href="https://layout-parser.readthedocs.io/en/latest/">LayoutParser</a> module, which employs a host of models from the <a href="https://github.com/facebookresearch/detectron2">Detectron2 platform</a> for the task of document layout parsing. We used the best configuration suggested by the <a href="https://layout-parser.readthedocs.io/en/latest/notes/modelzoo.html">docs</a> of <a href="https://arxiv.org/pdf/1703.06870.pdf">Mark RCNN</a> trained on the <a href="https://arxiv.org/pdf/1908.07836.pdf">PubLayNet</a> dataset of document layout analysis. As you can see, the model in this case can detect 5 elements in the dictionary <code>{0: "Text", 1: "Title", 2: "List", 3:"Table", 4:"Figure"}</code>. <code>pdf2image</code> and an <code>ocr_agent</code> needs importing and creating respectively because the model works on images, so we need to convert the PDF file to image(s) i.e.&nbsp;NumPy array(s) before doing anything.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DocLayout(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract_pdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, file_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb3-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" From a local file pdf file, extract the title, text, tables and figures</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            file_name (str): path to the pdf file</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            title (str): title of the paper</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Paper (str): text of the paper</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            table_by_page (dict(list)): dictionary of tables by page, each page has a list of tables, represent by 3D numpy array</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            figure_by_page (dict(list)): dictionary of figures by page, each page has a list of figures, represent by 3D numpy array</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-12">        list_of_pages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pdf2image.convert_from_path(file_name)</span>
<span id="cb3-13">        images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.asarray(page) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> page <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> list_of_pages]</span>
<span id="cb3-14">        image_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(images[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb3-15"></span>
<span id="cb3-16">        header_blocks, text_blocks, table_blocks, figure_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._detect_element(images)</span>
<span id="cb3-17"></span>
<span id="cb3-18">        title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_title(image_width, images, header_blocks)</span>
<span id="cb3-19">        Paper <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_text_info(image_width, images, text_blocks)</span>
<span id="cb3-20">        table_by_page, figure_by_page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_table_n_figure(image_width, images, table_blocks, figure_blocks)</span>
<span id="cb3-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Currently we dont care about the order of the figures or tables returned</span></span>
<span id="cb3-22">        tables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._general_by_table_to_list(table_by_page)</span>
<span id="cb3-23">        figures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._general_by_table_to_list(figure_by_page)</span>
<span id="cb3-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> title, Paper, tables, figures</span>
<span id="cb3-25"></span>
<span id="cb3-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _detect_element(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, images):</span>
<span id="cb3-27">        types <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Title'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Text'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Table'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Figure'</span>]</span>
<span id="cb3-28">        type_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-29">            t: defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> types</span>
<span id="cb3-30">        }</span>
<span id="cb3-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(images)):</span>
<span id="cb3-32">            layout_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.detect(images[i])</span>
<span id="cb3-33">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> types:</span>
<span id="cb3-34">                type_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lp.Layout([b <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> layout_result <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> b.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>t])</span>
<span id="cb3-35">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(type_block) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-36">                    type_blocks[t][i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> type_block</span>
<span id="cb3-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> type_blocks.values()</span></code></pre></div>
<p><code>pdf2image.convert_from_path()</code> returns a list of Pillow image, which needs converting to a list of NumPy arrays before work. Afterwards, in <code>_detect_element()</code> method, call <code>sel.model.detect()</code> to return a list of bounding boxes (represent by the top-left and right-bottom coordinates with respect to the particular page) with element type. The list of blocks returned will be processed accordingly.</p>
</section>
<section id="docreader.py" class="level2">
<h2 class="anchored" data-anchor-id="docreader.py"><code>DocReader.py</code></h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># There are minor differences (by the time of post) from the file in the repo</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> llama_index  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SimpleDirectoryReader, GPTSimpleVectorIndex, LLMPredictor, PromptHelper</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAI</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DocReader(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, directory_path, index_path):</span>
<span id="cb4-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.index_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index_path</span>
<span id="cb4-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.directory_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> directory_path</span>
<span id="cb4-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_input_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span></span>
<span id="cb4-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb4-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_chunk_overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb4-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.chunk_size_limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span></span>
<span id="cb4-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.llm_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LLMPredictor(llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OpenAI(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text-davinci-003"</span>, max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_outputs))</span>
<span id="cb4-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompt_helper <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PromptHelper(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_input_size, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_outputs, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_chunk_overlap, chunk_size_limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.chunk_size_limit)</span>
<span id="cb4-15"></span>
<span id="cb4-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> construct_index(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Reconstruct the index, and save it to the database</span></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-20">        documents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SimpleDirectoryReader(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.directory_path).load_data()        </span>
<span id="cb4-21">        index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GPTSimpleVectorIndex(</span>
<span id="cb4-22">            documents, llm_predictor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.llm_predictor, prompt_helper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompt_helper</span>
<span id="cb4-23">        )</span>
<span id="cb4-24">        index.save_to_disk(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.index_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/index.json'</span>)</span>
<span id="cb4-25"></span>
<span id="cb4-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, query):</span>
<span id="cb4-27">        index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GPTSimpleVectorIndex.load_from_disk(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.index_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/index.json'</span>)</span>
<span id="cb4-28">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index.query(query, response_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span>)</span>
<span id="cb4-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response.response</span></code></pre></div>
<p>A LlamaIndex workflow consists of 4 steps:</p>
<ol type="1">
<li>Initialize an <code>LLMPredictor()</code> instance (based on LangChain <a href="https://langchain.readthedocs.io/en/latest/modules/llms.html"><code>LLM</code> and <code>LLMChain</code></a>, which supports many other model hubs besides OpenAI). <code>LLMPredictor()</code> is a wrapper outside the model we use.</li>
<li>Initialize a <a href="https://gpt-index.readthedocs.io/en/latest/reference/prompt_helper.html"><code>PromptHelper</code></a> instance that helps to define various parameters for the prompt.</li>
<li>Index the document. There are many ways to achieve this, but the most simple way is calling <code>SimpleDirectoryReader()</code> to get the documents and <code>GPTSimpleVectorIndex()</code> to get the index that can be saved as a .json file.</li>
<li>Query over the index. There are different, pre-defined response mode in LlamaIndex. Explore the docs for more.</li>
</ol>
<p>And that’s it! Short and simple, yes powerful.</p>
</section>
<section id="docsummarizer.py" class="level2">
<h2 class="anchored" data-anchor-id="docsummarizer.py"><code>DocSummarizer.py</code></h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> DocLayout <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DocLayout</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DocSummarizer(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb5-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, documents_path: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, resources_path: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb5-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.documents_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> documents_path</span>
<span id="cb5-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resources_path</span>
<span id="cb5-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompt_tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-13">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'authors'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Who are the authors of this paper'</span>,</span>
<span id="cb5-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Summarize the above text, focus on key insights"</span>,</span>
<span id="cb5-15">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keyresults'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Give me three key results in the format of "Key results:</span></span>
<span id="cb5-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                1.  Key result 1</span></span>
<span id="cb5-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                2. Key result 2</span></span>
<span id="cb5-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                3. Key result 3"'''</span>,</span>
<span id="cb5-19">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keyword'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Give me keywords in the format of "Keywords:  Keyword 1, Keyword 2, Keyword 3"'</span>,</span>
<span id="cb5-20">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'limitations'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Give me 3 sentences describing the limitations of the text above.'</span></span>
<span id="cb5-21">        }</span>
<span id="cb5-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DocLayout()</span>
<span id="cb5-23">        </span>
<span id="cb5-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_summary(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, file_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, reader):</span>
<span id="cb5-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns a summary of the document, this document is a pdf file that has been uploaded to the server.</span></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        And save the summary to the database/resources.</span></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb5-29">        title, Paper, tables, figures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout_model.extract_pdf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.documents_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name)</span>
<span id="cb5-30">        authors, summary, keywords, keyresults, limitations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._read(Paper, reader)</span>
<span id="cb5-31">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-32">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>: title,</span>
<span id="cb5-33">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'authors'</span>: authors,</span>
<span id="cb5-34">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>: summary,</span>
<span id="cb5-35">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'key_concepts'</span>: keywords,</span>
<span id="cb5-36">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'highlights'</span>: keyresults,</span>
<span id="cb5-37">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'limitations'</span>: limitations,</span>
<span id="cb5-38">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figures'</span>: [],</span>
<span id="cb5-39">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tables'</span>: [],</span>
<span id="cb5-40">        }</span>
<span id="cb5-41">        </span>
<span id="cb5-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]):</span>
<span id="cb5-43">            os.mkdir(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb5-44">        </span>
<span id="cb5-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/info.json'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-46">            json.dump(response, f)</span>
<span id="cb5-47">        </span>
<span id="cb5-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/title.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-49">            f.write(title)</span>
<span id="cb5-50">        </span>
<span id="cb5-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx, table <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tables):</span>
<span id="cb5-52">            im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.fromarray(table)</span>
<span id="cb5-53">            local_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(idx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_table.png'</span></span>
<span id="cb5-54">            table_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(idx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_table.png'</span></span>
<span id="cb5-55">            im.save(table_fn)</span>
<span id="cb5-56">            response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tables'</span>].append(local_fn)</span>
<span id="cb5-57">        </span>
<span id="cb5-58">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx, fig <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(figures):</span>
<span id="cb5-59">            im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.fromarray(fig)</span>
<span id="cb5-60">            local_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(idx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_fig.png'</span></span>
<span id="cb5-61">            fig_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(idx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_fig.png'</span></span>
<span id="cb5-62">            im.save(fig_fn)</span>
<span id="cb5-63">            response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figures'</span>].append(local_fn)</span>
<span id="cb5-64">        </span>
<span id="cb5-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response</span>
<span id="cb5-66"></span>
<span id="cb5-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> retrieve_summary(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, file_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb5-68">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns a summary of the document (retrieve from resources), this document is a pdf file that already in the server.</span></span>
<span id="cb5-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb5-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]):</span>
<span id="cb5-72">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'File not found'</span>)</span>
<span id="cb5-73">        </span>
<span id="cb5-74">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-75">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb5-76">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'authors'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb5-77">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb5-78">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'key_concepts'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb5-79">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'highlights'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb5-80">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'limitations'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb5-81">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figures'</span>: [],</span>
<span id="cb5-82">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tables'</span>: [],</span>
<span id="cb5-83">        }</span>
<span id="cb5-84">        </span>
<span id="cb5-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/title.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-86">            response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb5-87">        </span>
<span id="cb5-88">        response_js <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/info.json'</span>))</span>
<span id="cb5-89">        response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'authors'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response_js[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'authors'</span>]</span>
<span id="cb5-90">        response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response_js[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>]</span>
<span id="cb5-91">        response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'key_concepts'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response_js[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'key_concepts'</span>]</span>
<span id="cb5-92">        response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'highlights'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response_js[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'highlights'</span>]</span>
<span id="cb5-93">        response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'limitations'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response_js[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'limitations'</span>]</span>
<span id="cb5-94">          </span>
<span id="cb5-95">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> fn <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resources_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]):</span>
<span id="cb5-96">            fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_name[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fn</span>
<span id="cb5-97">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fig'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> fn:</span>
<span id="cb5-98">                response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figures'</span>].append(fn)</span>
<span id="cb5-99">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-100">                response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tables'</span>].append(fn)</span>
<span id="cb5-101">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response</span>
<span id="cb5-102">    </span>
<span id="cb5-103">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _read(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, Paper, reader):</span>
<span id="cb5-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Read the text and returns the authors, summary, keywords, keyresults and limitations</span></span>
<span id="cb5-106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb5-107">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: Currently we use the Doc Reader service to read the text, but we need to implement our own service</span></span>
<span id="cb5-108">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb5-109">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> query_type, prompt <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prompt_tail.items():</span>
<span id="cb5-110">            ans_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reader.predict(prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(Paper[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]))</span>
<span id="cb5-111">            response[query_type] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ans_query</span>
<span id="cb5-112">        </span>
<span id="cb5-113">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'authors'</span>], response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>], response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keywords'</span>], response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keyresults'</span>], response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'limitations'</span>]</span></code></pre></div>
<p>The <code>DocSummarizer</code> class continues where the <code>DocLayout</code> leaves. The text information retrieved from a document will be concatenated with a suitable prompt tail to send to OpenAI. Notice that each prompt tail is provided with a format for the model to follow (and it did follow!) in the response. For the graphics, they are converted from NumPy arrays to .PNG files in a folders that are accessible from the UI.</p>
</section>
<section id="app.py" class="level2">
<h2 class="anchored" data-anchor-id="app.py"><code>app.py</code></h2>
<p>Add some magic from Flask</p>
</section>
<section id="client" class="level2">
<h2 class="anchored" data-anchor-id="client"><code>client</code></h2>
<p>Add some magic from React.js</p>
</section>
<section id="result" class="level2">
<h2 class="anchored" data-anchor-id="result">Result</h2>
<p>Here is the final demo capture of SumMed</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/hackathon-report/329814980 859809608651093_535713842991494898.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><em>Left is the navigation bar displaying the papers. Center is the key information (text and graphics) + Slide maker that is not yet implemented. Right is the chatbox with information on the paper</em></figcaption>
</figure>
</div>
</section>
</section>
<section id="aftermath" class="level1">
<h1>Aftermath</h1>
<p>We nearly choked at the demo. I stored the API in an .env file, and used <code>git add .</code> to commit to GitHub. GitHub found the open key, and proceeded to tell OpenAI to revoke the key automatically. Fun experience. Besides that, we found out just how inexperienced we are in terms of prototyping and pitching. You see, there were UIs that looked so dazzling that I wanted to cry, and tall technology stack from Azure or GCP.</p>
<p>And we all lost to a team with no prototype (see the above repo), but enough features with a clear demonstration of the tech stack. Inexperience indeed.</p>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next</h2>
<p>There are many things to improve on. I will sample three of them.</p>
<ol type="1">
<li><strong>Refactor code for LlamaIndex and try options out of OpenAI.</strong> We are currently using all the “simple” stuff from LlamaIndex. It works, but not optimal. There are better ways (FAISS) to perform vector search between question and document, and better index data structure (tree for summary) for each task.</li>
<li><strong>Fine-tune the document layout parsing model.</strong> Microsoft offers its <a href="https://www.microsoft.com/en-us/research/publication/layoutlm-pre-training-of-text-and-layout-for-document-image-understanding/">LayoutLM</a> in HuggingFace Hub, which can be fine-tuned using the <a href="https://github.com/huggingface/transformers">🤗 Transformers</a> module. There are <a href="https://towardsdatascience.com/fine-tuning-layoutlm-v3-for-invoice-processing-e64f8d2c87cf">mentions</a> online about the effectiveness of the fine-tuned model.</li>
<li><strong>End-to-end pipeline going straight from PDF to Slides/Infographic.</strong> The real big thing. Right now, we settle at the users manually used the extracted information to create slides, but the ideal case is automatically doing so for the users. The other two are technical optimization, this one is putting things all together and finish the job.</li>
</ol>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>And that’s it for the hackathon and the tool. It has been a most tiring weekends (5 days later and I can still feel it) with admittedly an anti-climatic ending. But this is not the end. See you at the next hackathon.</p>
<p><em>I would like to thank Hoang for his all-nighter effort, nagging me to define class instead of function, and various thoughts and experiences that deserve a whole post of them own.</em></p>


</section>

 ]]></description>
  <category>code</category>
  <category>Engineering/Hacking</category>
  <guid>https://hangenyuu.github.io/h-notes/posts/hackathon-report/index.html</guid>
  <pubDate>Mon, 27 Feb 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Conditional &amp; Controllable GAN</title>
  <dc:creator>Pham Nguyen Hung</dc:creator>
  <link>https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/index.html</link>
  <description><![CDATA[ 




<p>Apologize for being late: it has been nearly 3 weeks already since the latest post. But I am back for the last week of content.</p>
<p>When I started writing, it was near the time to bed, and without a doubt, I am hungry. So let’s deal with cookies this time.</p>
<p>Up until now, our GAN has managed to do some interesting stuff (“writing” Kanji characters, or numbers, if you used the traditional MNIST dataset). However, one thing you must notice is that we have <em>no</em> control over what the Generator will give us. It can be a “na”, it can be a “tsu”, it can be a “ki” - no control whatsoever. In our cookie analogy, our current Generator is like a goodwilled roomie who bakes for us every day, but each day we will receive a random cookie type.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/cookie 1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>You know it is cookie, but you have no idea what type is it</em></figcaption><p></p>
</figure>
</div>
<p>Now, if you love randomness and can tolerate the taste as well as the sugar, fine. But we usually want our model to be <em>controllable</em>, that is, we get to decide (to some extent) what will be included in the output.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/cookie 2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>It’s much nicer to control that you have matcha on Monday, chocochip on Tuesday, and so on.</em></figcaption><p></p>
</figure>
</div>
<p>With the objective set, let’s explore way to implement controllable GAN a.k.a way to make sure we have the correct cookie each day.</p>
<section id="limiting-to-just-one-category" class="level1">
<h1>Limiting to just one category:</h1>
<p>This is a no-brainer solution. To prevent random category generation (and mode collapse as well), who don’t just feed in data of a single class only? It is like always mixing matcha powder into the dough to make the cookies, ensuring that every day we will get matcha cookies.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/cookie 3.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>A matcha cookie junkie’s dream.</em></figcaption><p></p>
</figure>
</div>
<p>Obviously this solution is for when you want to generate examples of one class only. One example would be augmenting data for brain EMR of a certain disease at a certain region. The other <del>trolled</del> example is <a href="https://www.kaggle.com/datasets/andy8744/ganyu-genshin-impact-anime-faces-gan-training">GANyu</a>, a dataset and models fine-tuned on it for the task of generating faces of the Genshin Impact character Ganyu (Check out the <a href="https://www.kaggle.com/datasets/andy8744/rezero-rem-anime-faces-for-gan-training">GA(N)Rem</a> as well).</p>
<blockquote class="blockquote">
<p>I don’t know what is the thing for animes and GANs, but the moment I discovered GANs, I instantly thought of generating anime girls’ faces. Is is the same phenomenon as researchers in the 90’s instantly thought of classifying cat from everything else the moment they got a decent classifier… - A certain unfamous author on the web</p>
</blockquote>
<p>Moving to more general (and sensible) solution, we must take note of a crucial principle: we cannot generate something that the model has not ever seen before. It’s like we need to give matcha powder to our dear friend if we expect him to bake us some matcha cookies. This principle is handy in exploring the two solutions. The two approaches will both involve tampering with the input noise vector <img src="https://latex.codecogs.com/png.latex?z">. While one focuses on the <em>class/label</em> of the generated, the other focuses on the <em>features</em> of the generated.</p>
</section>
<section id="conditional-generation-control-the-class" class="level1">
<h1>Conditional Generation (Control the class):</h1>
<p><a href="https://arxiv.org/pdf/1411.1784.pdf">Conditional Generative Adversarial Nets</a> was a solution to make GAN more controllable, by passing some extra information <img src="https://latex.codecogs.com/png.latex?y"> (the easiest is class labels, as one-hot vector) with the data fed to Generator and Discriminator. Here is an illustrated example and implementation:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/cgan 1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>An input vector to Generator now is made up of two components: noise inputs (to ensure that each generation will be unique) &amp; one-hot class vector (to ensure that the generate example will be of the class we want)</em></figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/cgan 2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>Similarly, an input to the Discriminator now is an image together with the an one-hot class vector. For an example to be regarded as real, not only it needs to look realistic (reflected by a low binary corss-entropy or Wasserstein loss) but it also needs to look like real examples from the same class. Here, an original matcha cookie definitely looks like a matcha cookie.</em></figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/cgan 3.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>Here is the earlier generated matcha cookie. Let’s say that our Discriminator is a bit better than the Generator. It means that it will detect this looks rather like a matcha cookie, but not too alike.</em></figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/cgan 4.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>Now suppose that the required class is black chocochip, but our Generator gives a matcha cookie. The Discriminator will recognize in this case and gives a low chance that the example is real.</em></figcaption><p></p>
</figure>
</div>
<p>The question now is how do we go on implementing this? From the descriptions, it seems that we need to do 2 things: 1) figure a way to pass the additional information into our two models and 2) update the loss function. 2) is trivial, as the same loss function (binary cross-entropy) can be used and we just need to make sure that the class of the examples are included in the output as well. For 1), in the case of Generator, you just need to concatenate it with the noise vector above. For Discriminator, it is a bit trickier. We feed the images in by passing values of three channels, so the simplest way will be to create n channels more for n classes. This way works for dataset such as the good ol’ MNIST, whether we flatten out images before concatentating or we keep the same matrix and just call <code>torch.cat()</code> (which will create 10 more channels, each of size 28*28, with one of them full of 1 and the rest full of 0). For larger images or ones we do not want to flatten, this simple approach will create a huge memory issue. We will want to pass class information in differently, such as via a different head of input layer, but that is outside of this post scope. Here are the code snippets for the easy case.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_one_hot_labels(labels: torch.Tensor, n_classes: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Function for creating one-hot vectors for the data.</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param labels: a vector containing the labels of all examples in a batch.</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                   Get from each DataLoader. Have shape (n_samples, 1)</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param n_classes: an integer for number of classes in the data.</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      Get from the dataset created</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :return: the one-hot vector for a batch of data</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> F.one_hot(labels,n_classes)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> combine_vectors(x, y):</span>
<span id="cb1-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generic function for combining two 2-D maxtrices with the same 0-shape</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    In our case, they will be (n_samples, x_1) and (n_samples, y_1).</span></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param x: the first matrix, shape (n_samples, x_1)</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param y: the second matrix, shape (n_samples, y_1)</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :return: the concatenated matrix of shape (n_samples, x_1 + y_1)</span></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb1-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To ensure unity of data types, we want the return matrix to have float</span></span>
<span id="cb1-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># type.</span></span>
<span id="cb1-27">    combined <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((x.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(),y.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> combined</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Code will not run if just copy-paste</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-training</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Just the basic part.</span></span>
<span id="cb2-4">kmnist_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb2-5">n_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb2-8">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BCEWithLogitsLoss()</span>
<span id="cb2-9">z_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Size of the noise vector</span></span>
<span id="cb2-10">gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Generator(input_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator_input_dim).to(device)</span>
<span id="cb2-11">gen_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(gen.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb2-12">disc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Discriminator(im_chan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>discriminator_im_chan).to(device)</span>
<span id="cb2-13">disc_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(disc.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb2-14">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> weights_init(m):</span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(m, nn.Conv2d) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(m, nn.ConvTranspose2d):</span>
<span id="cb2-18">        torch.nn.init.normal_(m.weight, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)</span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(m, nn.BatchNorm2d):</span>
<span id="cb2-20">        torch.nn.init.normal_(m.weight, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)</span>
<span id="cb2-21">        torch.nn.init.constant_(m.bias, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-22">gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(weights_init)</span>
<span id="cb2-23">disc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> disc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(weights_init)</span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb2-26">cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-27">generator_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-28">discriminator_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-29"></span>
<span id="cb2-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb2-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> real, labels <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(dataloader):</span>
<span id="cb2-32">        n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(real)</span>
<span id="cb2-33">        real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> real.to(device)</span>
<span id="cb2-34"></span>
<span id="cb2-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get image one-hot labels for this batch</span></span>
<span id="cb2-36">        one_hot_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_one_hot_labels(labels.to(device), n_classes)</span>
<span id="cb2-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember that the DataLoader is in size (n_samples, 1, 28, 28) while the one hot label matrix </span></span>
<span id="cb2-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># has size (n_samples, 1). We need to extend 2 more dimensions if we want to concatenate the two.</span></span>
<span id="cb2-39">        image_one_hot_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot_labels[:, :, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb2-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now the one-hot labels matrix has size (n_samples, 1, 1, 1). We need to turn it into</span></span>
<span id="cb2-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (n_samples, 1, 28, 28) to pass into the input layer.</span></span>
<span id="cb2-42">        image_one_hot_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_one_hot_labels.repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, kmnist_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], kmnist_shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb2-43"></span>
<span id="cb2-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Update discriminator</span></span>
<span id="cb2-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero out the discriminator gradients</span></span>
<span id="cb2-46">        disc_opt.zero_grad()</span>
<span id="cb2-47"></span>
<span id="cb2-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get noise corresponding to the current batch_size </span></span>
<span id="cb2-49">        fake_noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_noise(n_samples, z_dim, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb2-50">        </span>
<span id="cb2-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine the label and the noise and generate fake examples</span></span>
<span id="cb2-52">        noise_and_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combine_vectors(fake_noise, one_hot_labels)</span>
<span id="cb2-53">        fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen(noise_and_labels)</span>
<span id="cb2-54"></span>
<span id="cb2-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get Discriminator's predictiopn on the real and the fake examples</span></span>
<span id="cb2-56">        fake_image_and_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combine_vectors(fake, image_one_hot_labels)</span>
<span id="cb2-57">        real_image_and_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combine_vectors(real, image_one_hot_labels)</span>
<span id="cb2-58">        disc_fake_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> disc(fake_image_and_labels.detach()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do not update the Generator</span></span>
<span id="cb2-59">        disc_real_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> disc(real_image_and_labels)</span>
<span id="cb2-60"></span>
<span id="cb2-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate loss</span></span>
<span id="cb2-62">        disc_fake_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(disc_fake_pred, torch.zeros_like(disc_fake_pred))</span>
<span id="cb2-63">        disc_real_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(disc_real_pred, torch.ones_like(disc_real_pred))</span>
<span id="cb2-64">        disc_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (disc_fake_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> disc_real_loss) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-65"></span>
<span id="cb2-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb2-67">        disc_loss.backward(retain_graph<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-68"></span>
<span id="cb2-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the parameters</span></span>
<span id="cb2-70">        disc_opt.step()</span>
<span id="cb2-71"></span>
<span id="cb2-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep track of the average discriminator loss for visualization</span></span>
<span id="cb2-73">        discriminator_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [disc_loss.item()]</span>
<span id="cb2-74"></span>
<span id="cb2-75">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Update generator</span></span>
<span id="cb2-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero out the generator gradients</span></span>
<span id="cb2-77">        gen_opt.zero_grad()</span>
<span id="cb2-78"></span>
<span id="cb2-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Regenerate the fake examples with gradients to update</span></span>
<span id="cb2-80">        fake_image_and_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combine_vectors(fake, image_one_hot_labels)</span>
<span id="cb2-81">        disc_fake_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> disc(fake_image_and_labels)</span>
<span id="cb2-82"></span>
<span id="cb2-83">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate loss</span></span>
<span id="cb2-84">        gen_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(disc_fake_pred, torch.ones_like(disc_fake_pred))</span>
<span id="cb2-85"></span>
<span id="cb2-86">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropgation</span></span>
<span id="cb2-87">        gen_loss.backward()</span>
<span id="cb2-88"></span>
<span id="cb2-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the parameters</span></span>
<span id="cb2-90">        gen_opt.step()</span>
<span id="cb2-91"></span>
<span id="cb2-92">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep track of the generator losses for visualization</span></span>
<span id="cb2-93">        generator_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [gen_loss.item()]</span></code></pre></div>
</section>
<section id="controllable-generation-control-the-feature" class="level1">
<h1>Controllable Generation (Control the feature):</h1>
<p>Up until now, the noise vector fed into GANs is just “noise” - meaningless. However, the numbers in the noise vector do mean something. You can think that each number represent one feature that is recognized by the Generator. The combinations of all these features form a <em>latent space</em> - a space containing a simpler but hidden (to humans) representation of generated examples. This is best understood with the example of amino acid.</p>
<p>The basic of every bodily function is protein, which is a chain of amino acids (you don’t need to know what they are). Each amino acid in the chain is encoded as a sequence of 3 nucleotides, which have 4 in total (there are <img src="https://latex.codecogs.com/png.latex?4%5E%7B3%7D=64"> total combinations, but several combinations encoding the same amino acid, and there are special ones called <em>ending combinations</em> that signify the end but do not encode).</p>
<p>All the 64 combinations can thought of as the <em>latent space</em> of the amino acid. It’s like we have a well-trained Generator on 22 classes that output the exact amino acid or ending signal we want by passing into it certain 3 nucleotides. This is a latent space because the information has been simplified, but it is not quite latent because we now know the exact encoding of the information.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/genetic code.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em><a href="https://openstax.org/books/biology/pages/15-1-the-genetic-code#fig-ch15_01_04">“The genetic code”</a> by OpenStax College, Biology</em></figcaption><p></p>
</figure>
</div>
<p>In our KMNIST example, each image can be represented as a 28 by 28 matrix where each position stores the intensity of the pixel. It can be visualized as below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/KMNIST eg.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>A certain Japanese letter</em></figcaption><p></p>
</figure>
</div>
<p>In the noise vector above, we try to compress this information down to a vector of 64 numbers (recalling the <code>z_dim</code> above), hoping that this is sufficient to store the information to construct all 10 classes of handwritten kanji characters. But let’s fall back to our cookies for a more easily visualizable example.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/cgan 5.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>Before, we have been generating random numbers in the noise vector. Let’s say that we have been able to decode that the second number in our noise vector encodes information for color of the cookie, with 2.1 signifies the green matcha color we wants.</em></figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/cgan 6.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>Now, after training, we now know that 1.4 corresponds to the brown color of chochip cookies. We can now pass the number to get a brown cookie.</em></figcaption><p></p>
</figure>
</div>
<p>In reality, there are multiple things to note in implementation. One unfortunate thing was the DNA analogy extends to the noise space. A feature is often not influenced by a single value of the noise vector alone but depends on many ones. This is called <em>entanglement</em>, which mostly arises from having a noise vector with dimension smaller than the number of features we want to control. Entanglemnt affects our controllability: if two or more features’ values significantly depend on the same noise value, then changing it will shift all of them while we may want one to change. Therefore, we want to encourage <em>disentanglement</em> of features in two ways:</p>
<ol type="1">
<li>Ensure noise vector has enough data slots. You cannot expect disentanglement of 10 features if your noise vector only has 9 slots. Always have a noise vector with dimension at least the number of modifiable features you want</li>
<li>As a regularization.</li>
</ol>
<p>In practice, we will not learn the exact encoding (such as 2.1 for green or 1.4 for brown as above) but how the feature change with varying number (say, from green to brown by decreasing the <img src="https://latex.codecogs.com/png.latex?2%5E%7Bnd%7D"> number of the noise vector). You do this with, well, a classifier and label. First, you freeze the weight of the Generator. Then you classify the generated examples based on whether they have the feature(s) or not. Afterwards, you <em>update the noise vector</em> based on the loss function with backpropagation. That is the most simple (and laziest) way to update the noise vector, making it the greatest way (for we always want to do the most work with the least effort). Of course, now we need a pre-trained classifier on the feature(s) that we are trying to detect. If we do not, then we will need to train one on our own i.e.&nbsp;more work to do. You can observe the gradual change in the demo video below for the famous paper on the subject <a href="https://arxiv.org/pdf/1907.10786.pdf">Interpreting the Latent Space of GANs for Semantic Face Editing</a>.</p>
<div class="quarto-video ratio ratio-16x9"><iframe src="https://www.youtube.com/embed/uoftpl3Bj6w" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Here’s the implementation</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Again, this is not a full implementation</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The images we will work with now are RGB</span></span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb3-4"></span>
<span id="cb3-5">z_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb3-6">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb3-7">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb3-8">n_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb3-9"></span>
<span id="cb3-10">gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Generator(z_dim).to(device)</span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Magically train the model or load a pretrained one</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put the pretrained model on evaluation mode</span></span>
<span id="cb3-13">gen.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Defined class Classifier above</span></span>
<span id="cb3-16">classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Classifier(n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_classes).to(device)</span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Really load a pretrained model. Look for details at https://pytorch.org/tutorials/beginner/saving_loading_models.html</span></span>
<span id="cb3-18">class_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pretrained_classifier.pth"</span>, map_location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.device(device))[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier"</span>]</span>
<span id="cb3-19">classifier.load_state_dict(class_dict)</span>
<span id="cb3-20">classifier.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here is the optimizer. We have frozen the weight of the classifier with .eval()</span></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so only the noise gets updated.</span></span>
<span id="cb3-24">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(classifier.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gradient ascent for the noise</span></span>
<span id="cb3-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calculate_updated_noise(noise, weight):</span>
<span id="cb3-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Update and return the noise vector with gradient ascent</span></span>
<span id="cb3-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param noise: the old noise vector </span></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param weight: the weights to update each noise value. An analogy</span></span>
<span id="cb3-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                   to the learning rate, but for each noise value</span></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :return: the updated noise vector</span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb3-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ( noise.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> weight)</span>
<span id="cb3-36"></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Regularization for disentanglement - and also the scoring function to update noise</span></span>
<span id="cb3-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_score(current_classifications, original_classifications, target_indices, other_indices, penalty_weight):</span>
<span id="cb3-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb3-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Function to get the score of the update. Reward change in the target feature(s) to</span></span>
<span id="cb3-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    change and penalize changes in other features.</span></span>
<span id="cb3-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param current_classifications: the classifications associated with the current noise</span></span>
<span id="cb3-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param original_classifications: the classifications associated with the original noise     </span></span>
<span id="cb3-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param target_indices: the index of the target feature</span></span>
<span id="cb3-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param other_indices: the indices of the other features</span></span>
<span id="cb3-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param penalty_weight: the amount that the penalty should be weighted in the overall score</span></span>
<span id="cb3-47"></span>
<span id="cb3-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :return: the score for the current update. </span></span>
<span id="cb3-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb3-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Penalize change in other features</span></span>
<span id="cb3-51">    other_distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current_classifications[:,other_indices] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> original_classifications[:,other_indices]</span>
<span id="cb3-52">    other_class_penalty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>torch.norm(other_distances, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).mean() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> penalty_weight</span>
<span id="cb3-53">    </span>
<span id="cb3-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reward change in the target feature(s)</span></span>
<span id="cb3-55">    target_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current_classifications[:, target_indices].mean()</span>
<span id="cb3-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> target_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other_class_penalty</span>
<span id="cb3-57"></span>
<span id="cb3-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Generation time!</span></span>
<span id="cb3-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The dataset of choice was CelebA, and here's the list of feature</span></span>
<span id="cb3-60">feature_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5oClockShadow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ArchedEyebrows"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Attractive"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BagsUnderEyes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bald"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bangs"</span>,</span>
<span id="cb3-61"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BigLips"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BigNose"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BlackHair"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BlondHair"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blurry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BrownHair"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BushyEyebrows"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chubby"</span>,</span>
<span id="cb3-62"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DoubleChin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eyeglasses"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Goatee"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GrayHair"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HeavyMakeup"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HighCheekbones"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, </span>
<span id="cb3-63"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MouthSlightlyOpen"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mustache"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NarrowEyes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NoBeard"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OvalFace"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PaleSkin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PointyNose"</span>, </span>
<span id="cb3-64"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RecedingHairline"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RosyCheeks"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sideburn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smiling"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"StraightHair"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WavyHair"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WearingEarrings"</span>, </span>
<span id="cb3-65"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WearingHat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WearingLipstick"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WearingNecklace"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WearingNecktie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Young"</span>]</span>
<span id="cb3-66"></span>
<span id="cb3-67">grad_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb3-68">fake_image_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-69"></span>
<span id="cb3-70">target_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_names.index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smiling"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feel free to change this value</span></span>
<span id="cb3-71">other_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [cur_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> target_indices <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> cur_idx, _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(feature_names)]</span>
<span id="cb3-72">noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_noise(n_images, z_dim).to(device).requires_grad_() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Must have grad for gradient ascent</span></span>
<span id="cb3-73">original_classifications <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classifier(gen(noise)).detach() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># But we don't need gradients for classifier</span></span>
<span id="cb3-74"></span>
<span id="cb3-75"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(grad_steps):</span>
<span id="cb3-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty the optimizer</span></span>
<span id="cb3-77">    opt.zero_grad()</span>
<span id="cb3-78"></span>
<span id="cb3-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a batch of fake examples</span></span>
<span id="cb3-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and add to history</span></span>
<span id="cb3-81">    fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen(noise)</span>
<span id="cb3-82">    fake_image_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [fake]</span>
<span id="cb3-83"></span>
<span id="cb3-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate scoring function</span></span>
<span id="cb3-85">    fake_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_score(</span>
<span id="cb3-86">        classifier(fake), </span>
<span id="cb3-87">        original_classifications,</span>
<span id="cb3-88">        target_indices,</span>
<span id="cb3-89">        other_indices,</span>
<span id="cb3-90">        penalty_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb3-91">    )</span>
<span id="cb3-92">    fake_score.backward() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatically calculate noise gradients</span></span>
<span id="cb3-93">    noise.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_updated_noise(noise, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> grad_steps)</span></code></pre></div>
<p>Here is a <code>fake_image_history</code> for training for feature <code>"Smiling"</code>:</p>
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/celeb example.png" class="img-fluid"></p>
<p>The faces looked distorted. There’s no denying it. The reason may be correlation between features. For example, the model may not be able to generate a smiling face without creating one with a slightly open mouth. Moreover, the model may modify <em>unlabeled</em> features while modifying the target feature(s) and we cannot penalize them with this method.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Let’s compare Conditional and Controllable Generation. For Conditional Generation, we want <em>a specific class</em>, while for Controllable Generation, we want <em>a specific feature</em> for the output. Secondly, if data for Conditional Generation must contain class information, data for Controllable Generation must contain the feature(s) that we want (we cannot get matcha cookie from if we don’t have matcha powder); however, the data now do not need labeling. In both ways, we influence the input by the noise vector <img src="https://latex.codecogs.com/png.latex?z">, but if we concatenate it with class information before, now we try to directly modify the noise vector.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>GAN</category>
  <category>From scratch</category>
  <guid>https://hangenyuu.github.io/h-notes/posts/gan-p4-conditional/index.html</guid>
  <pubDate>Tue, 21 Feb 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>That Unstable GAN</title>
  <dc:creator>Pham Nguyen Hung</dc:creator>
  <link>https://hangenyuu.github.io/h-notes/posts/gan-p3/index.html</link>
  <description><![CDATA[ 




<p>In the last two posts, I have gone over the concept and process of training GANs. I made it seem so straightforward, but reality is harsher. Recall that for GANs, we are training two neural networks at once, and these two compete with each other to mutually improve. Much like real life, if one competitor is too good, the other will not learn anything, if the at point before the end the Generator or the Discriminator becomes too good (or the other becomes too bad), then training breaks down. Thus, training GANs is highly unstable, and any way to ensure smoother training is encouraged.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p3/test 17.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>I tried to find an xkcd comic for training GANs, but found none. Instead I found this <a href="https://github.com/generic-github-user/xkcd-Generator/">repo</a> about using GANs to generate xkcd comic. It is not even close for a substitute, but you can defintely see that training has broken down: the loss of Generator is way much more than the loss of the Discriminator, and the difference between THIS and an <a href="https://xkcd.com/1838/">xkcd comic</a> is obvious</em></figcaption><p></p>
</figure>
</div>
<section id="general-methods" class="level1">
<h1>General methods</h1>
<section id="activation-function" class="level2">
<h2 class="anchored" data-anchor-id="activation-function">Activation function</h2>
<p>Activation function is a requirement for neural networks’ ability to approximate complex function. Without it, a neural network will become just another linear function.</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sb</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-8"></span>
<span id="cb1-9">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>)</span>
<span id="cb1-10">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>)</span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> linear(a, b, x):</span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb2-4">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb2-5">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7">ax1.plot(x, linear(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> linear(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.56</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.32</span>, x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> linear(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.86</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.74</span>, x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o--'</span>)</span>
<span id="cb2-8">ax2.plot(x, torch.relu(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.relu(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.56</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.relu(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.86</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o--'</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10">ax1.grid()</span>
<span id="cb2-11">ax2.grid()</span>
<span id="cb2-12">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-1" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p3/index_files/figure-html/fig-1-output-1.png" width="707" height="259" class="figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;1: Stacking linear functions on top of each other is just a linear function. Meanwhile, stacking ReLU functions on top of each other create a piecemeal linear function that approximates a curve.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>We all starts with the sigmoid function in a binary cross-entropy problem. However, sigmoid, together with tanh, leads to the “vanishing gradient” problem. When the output value of gets close to 0 or 1 for sigmoid (or -1 or 1 for tanh), the gradient gets close to 0, so the weights either are updated very slowly or stop learning altogether. That was when ReLU came into play: the function has a clear, positive gradient when output value is greater than 0, while the bend makes sure that ReLU stacking on each other can produce a curve.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p3/1 KKjPz4KaEERCpvI04D6Bng.webp" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>Each neural network had three hidden layers with three units in each one. The only difference was the activation function. Learning rate: 0.03, regularization: L2. <a href="https://towardsdatascience.com/if-rectified-linear-units-are-linear-how-do-they-add-nonlinearity-40247d3e4792">Source</a></em></figcaption><p></p>
</figure>
</div>
<p>However, the joy ReLU brought came to halt when “dying ReLU” problem was reported. Suppose we have an output smaller or equal 0, then our derivative will be 0. The 0 derivative on the node means that it will not get updated, and that’s the end for it. Worse, the previous components connected to the node are affected as well, so the whole structure of our neural network will be “dead”. To fix, we have the variation: LeakyReLU. For LeakyReLU, the output value below 0 is not set at 0, but is multiplied by a constant (such as 0.2). Gradient for such value will still be non-zero, provide information to update the weights.</p>
<p>Another, more advanced variation is <a href="https://ar5iv.labs.arxiv.org/html/1606.08415v4">GeLU</a>, where the output is multiplied with i.e.&nbsp;weighted by its percentile. Sounds too complicated? Look at the formula: <img src="https://latex.codecogs.com/png.latex?GELU(x)=x*P(X%3Cx)=x*%5CPhi(x)"> for <img src="https://latex.codecogs.com/png.latex?X"> ~ <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D(0,%201)"></p>
<p>GELU has been successfully applied in Transformer models such as <a href="https://ar5iv.labs.arxiv.org/html/1810.04805v2">BERT</a>, <a href="https://ar5iv.labs.arxiv.org/html/2005.14165v4">GPT-3</a>, and especially in CNN such as <a href="https://ar5iv.labs.arxiv.org/html/2201.03545">ConvNeXts</a>. (Yeah, look at ConvNeXts - it started with a ResNet, the great ConvNet architecture, then the authors slowly introduced all the modern training tricks, until the result surpassed the Swin Transformer in the cheer of CNN-backer/Transformer-haters. Okay, that was eaxaggerating, but still…)</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb3-2">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb3-3">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">ax1.plot(x, F.leaky_relu(x, negative_slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o--'</span>)</span>
<span id="cb3-6">ax2.plot(x, F.gelu(x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o--'</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8">ax1.grid()</span>
<span id="cb3-9">ax2.grid()</span>
<span id="cb3-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-2" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p3/index_files/figure-html/fig-2-output-1.png" width="719" height="259" class="figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;2: LeakyReLU and GELU</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Now let’s move on to the second general trick that we have already done: batch normalization.</p>
</section>
<section id="batch-normalization" class="level2">
<h2 class="anchored" data-anchor-id="batch-normalization">Batch normalization</h2>
<p>We all know that neural netowrk is trying to appromixate a certain way of mapping inputs i.e.&nbsp;data to outputs. The parameters of a neural network therefore depend on the data we receive, characteristically the <em>distribution of the data</em>. Here I have this example of an HDR image, which captures a farther range of color and exposure than a compressed format such as JPG or PNG. I found the original image from the Internet <a href="https://blog.gregzaal.com/2014/03/29/pano-golden-gate/">here</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p3/Screenshot 2023-01-24 205502.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>The curve at the bottom that may remind you of a bell curve is the curve for the distribution of pixel values a.k.a colors</em></figcaption><p></p>
</figure>
</div>
<p>Now, we train a neural network on data having similar color distribution such as this image, possibly for the task of recognizing grass. The model was trained well. Alas, the testing image contains one such as this</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p3/Screenshot 2023-01-24 205554.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>This was the exact same image, but compressed at a differen color distribution (shifted to the right)</em></figcaption><p></p>
</figure>
</div>
<p>Here we say that the data distribution <em>has shifted between training data and testing data</em>. This generally will cause model problems (decrease accuracy, etc.). Data distribution shift (or covariate shift) can also happen between batches of training data, leading to slow convergence (imagine the model has to take a zig-zag path instead of a straight one). This can be dealt with by <em>normalization</em>, where make sure that the distributions of the training set and the testing set are similar e.g.&nbsp;centered around a mean of 0 and a standard deviation of 1. This could be done by taking the mean and standard deviation for each training batch of image and normalize the inputs of each training batch, then take the accumulated statistics to normalize the testing set during testing. This will smooth out the cost function and increases model performance (you might not need to do this if your training set and testing set are already similar to each other).</p>
<p>However, model is susceptible to <em>internal covariate shift</em> as well, where the activation output distributions shift between each layer. This can happen due to the change in the weights of each layer. Batch normalization came into play here by normalizing the inputs to each layer (“batch” means that we do so for each batch of image). For example, supposed are at nueron <img src="https://latex.codecogs.com/png.latex?i"> of non-last layer <img src="https://latex.codecogs.com/png.latex?l">, with activated output from the last layer to this neuron being <img src="https://latex.codecogs.com/png.latex?a_%7Bi%7D%5E%7B%5Bl-1%5D%7D">. The logit out of this neuron will be <img src="https://latex.codecogs.com/png.latex?z_%7Bi%7D%5E%7B%5Bl%5D%7D=%5CSigma%20W_%7Bi%7D%5E%7B%5Bl%5D%7Da_%7Bi%7D%5E%7B%5Bl-1%5D%7D"></p>
<p>Without batch normalization, the logit will be passed into activation to output <img src="https://latex.codecogs.com/png.latex?a_%7Bi%7D%5E%7B%5Bl%5D%7D">. But here, we will perform batch normalization:</p>
<ol type="1">
<li>We get the statistics mean <img src="https://latex.codecogs.com/png.latex?%5Cmu%20_%7Bz_%7Bi%7D%5E%7B%5Bl%5D%7D%7D"> and variance <img src="https://latex.codecogs.com/png.latex?%5Csigma%20_%7Bz_%7Bi%7D%5E%7B%5Bl%5D%7D%7D%20%5E%7B2%7D"> for the batch.</li>
<li>We use them in the formula <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bz%7D_%7Bi%7D%5E%7B%5Bl%5D%7D=%5Cfrac%7Bz_%7Bi%7D%5E%7B%5Bl%5D%7D-%5Cmu%20_%7Bz_%7Bi%7D%5E%7B%5Bl%5D%7D%7D%7D%7B%5Csqrt%7B%5Csigma%20_%7Bz_%7Bi%7D%5E%7B%5Bl%5D%7D%7D%20%5E%7B2%7D%20+%20%5Cepsilon%7D%7D"> Nothing too fancy - it’s just the normalization formula that you encounter in any statistics course/textbook: substract the value by the mean, then divide it by the square root of variance a.k.a the standard deviation. The <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> term is a positive constant there to make sure that the denominator is always positive.</li>
<li>We map the normalized value <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bz%7D_%7Bi%7D%5E%7B%5Bl%5D%7D"> to a new distribution with the formula <img src="https://latex.codecogs.com/png.latex?y_%7Bi%7D%5E%7B%5Bl%5D%7D=%5Cgamma*%5Chat%7Bz%7D_%7Bi%7D%5E%7B%5Bl%5D%7D%20+%20%5Cbeta"> where <img src="https://latex.codecogs.com/png.latex?%5Cgamma"> is <em>scale factor</em> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> the <em>shift factor</em>. These two are learnable inputs in the batch normalization layer, and will be tuned to figure out the best distribution for the task at hand.</li>
<li>We pass <img src="https://latex.codecogs.com/png.latex?y_%7Bi%7D%5E%7B%5Bl%5D%7D"> through the activation function to the output <img src="https://latex.codecogs.com/png.latex?a_%7Bi%7D%5E%7B%5Bl%5D%7D">.</li>
</ol>
<p>The batch normalization layer seems complicated, but we usually does not need to all the things. As backpropagation is reduced to just calling <a href="https://pytorch.org/tutorials/beginner/introyt/trainingyt.html#the-training-loop"><code>loss.backward</code></a> in PyTorch, the <a href="https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm2d.html"><code>nn.BatchNorm2d()</code></a> (for images) will take care of this during training.</p>
<p>There is another normalization method called <em>layer normalization</em>. I will not go into details here, though I very much want to because it was used in the training of ConvNeXts as well (seriously, I want to make a blog post just about the tricks used in pushing this CNN to surpass Swin). Here is a <a href="https://www.pinecone.io/learn/batch-layer-normalization/">post</a> about the two normalizations that also have great images. In PyTorch, this is implemented in <a href="https://pytorch.org/docs/stable/generated/torch.nn.LayerNorm.html"><code>nn.LayerNorm()</code></a>.</p>
</section>
</section>
<section id="gans-specific-method" class="level1">
<h1>GAN’s specific method</h1>
<p>To be honest, there should be tens of tricks for GANs. But I will only cover one this post: Wasserstein GAN (WGAN) and the accompanied Gradient Penalty.</p>
<section id="wgan" class="level2">
<h2 class="anchored" data-anchor-id="wgan">WGAN:</h2>
<p>First, we need to talk about <em>mode collapse</em>. Now, a mode in statistical term is the value that we are most likely to get from a distribution (not too correct for continuous distribution, but still great for understanding). This will be represented by a peak in the data distribution, such as the mean in a normal distribution. A distribution can have just one mode, like the normal distribution, or multiple modes like below.</p>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">sample1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb4-2">sample2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">700</span>)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenating the two sample along the second axis</span></span>
<span id="cb4-4">sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.hstack((sample1, sample2))</span>
<span id="cb4-5"></span>
<span id="cb4-6">sb.kdeplot(sample)</span>
<span id="cb4-7">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-3" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p3/index_files/figure-html/fig-3-output-1.png" width="606" height="404" class="figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;3: A bimodal distribution created by merging two normal distributions</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>The outputs have their modes alright. For example, in our KMNIST dataset, there are 10 modes for the output, corresponding to 10 characters. So we have a new way to think about training: we are trying to make the model learn to shift the distribution of the outputs to approximate the one we want. For illustration, suppose initially our model is outputing each value for each pixel randomly, leading to an output distribution like this.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p3/Copy of GAN-p2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>Initial output distribution</em></figcaption><p></p>
</figure>
</div>
<p>We want to change the output to this kind of distribution</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p3/Copy of GAN-p3.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption"><em>We want to shift from the circle to just 10 peaks i.e.&nbsp;just outputting 1 from 10 classes at a time</em></figcaption><p></p>
</figure>
</div>
<p>In the ideal scenario, our model will be guided by the loss function to make the right shift. However, notice a lack in the BCE loss: it only promotes the model generating images close to real images, regardless of the class of the image. This means that there exists a quick n’ dirty way for the Generator to reduce the loss by <em>only generating images from 1 class that the Discriminator is most fooled by</em>. So there exists a case where we end up with a Generator that outputs very realistic kanji character, only that it generates <em>kanji character</em>, say, only “tsu”. That’s boring.</p>
<p>My last paragraph gives hint to the source of the problem: our loss function. BCE loss works to push the Generator forward, but it cannot capture the information of class within the image. We need something else. And that something else is <a href="https://ar5iv.labs.arxiv.org/html/1701.07875">Wasserstein GAN</a>, introducing a new kind of loss function: the Wasserstein Loss (no surprise) a.k.a the <em>Earth Mover’s distance</em>, or EM distance. It measures the difference between two distributions, and can be informally defined as the least amount of energy required to move and mold a earth pile in the shape of one distribution to the shape of another distribution (hence earth mover).</p>
<p>In mathematical form, if we have the noise vector <img src="https://latex.codecogs.com/png.latex?z">, the fake image data <img src="https://latex.codecogs.com/png.latex?x">, the Generator model <img src="https://latex.codecogs.com/png.latex?g()">, the Discriminator who becomes the Critic <img src="https://latex.codecogs.com/png.latex?c()">, then the Wasserstein Loss is the difference between the expected value i.e.&nbsp;the mean of the Critic outputs for real images and the mean of the Critic outputs for generated images. <img src="https://latex.codecogs.com/png.latex?WLoss=E(c(x))-E(c(g(z)))"></p>
<p>We still have a minimax game here, with the Generator’s goal being minimize the above difference and the Critic’s goal being maximize the above difference. Notice also that the Critic now is no longer a classifier: it can give any real value possible e.g.&nbsp;higher score for real(istic) examples. This means that the Generator will get useful feedback for all classes of examples, and is less prone to mode collapse. Getting rid of the classifier i.e.&nbsp;the sigmoid function in the output also means that vanishing gradient is also less likely. Two birds, one stone.</p>
<p>W-Loss has one condition: the function of the Critic should be 1-Lipschitz Continuity. That looks intimidating but it just means that the norm of the gradient (the value in 2D math, the <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bx%5E%7B2%7D+y%5E%7B2%7D+...%7D"> as example in higher dimensions) for the Critic can be at most 1 at any point. In other words, the output of the Critic cannot increase/decrease more than linearly at any point. To achieve this, the first proposed (and terrible way, according to the original author) was <em>weight clipping</em> - forcing the weights to a fixed interval, say, [0,1]. Any negative value will be set to 0, and any value more than 1 will be set to 1. This was terrible (I have to say it again) because it limits the potential of the Critic. Another less strict way is <a href="https://arxiv.org/abs/1704.00028">gradient penalty</a> (the first dead ar5iv link), where you add a regularization term in the loss function to <em>promote</em> the Critic to be 1-Lipschitz Continuity, as oppposed to forcing it. Formula is <img src="https://latex.codecogs.com/png.latex?WLoss=E(c(x))-E(c(g(z)))%20+%20%5Clambda%20*%20pen"> with <img src="https://latex.codecogs.com/png.latex?pen=E((%7C%7C%20%5Cnabla%20c(%5Chat%7Bx%7D)%7C%7C_%7B2%7D-1)%5E%7B2%7D)">, <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D=%5Cepsilon%20x%20+%20(1-%5Cepsilon)g(z)"></p>
<p>For completeness, the Critic gradient needs checking at every point in the feature space, which is impractical. What we do is sampling some points from real examples, and then some points from generated examples with weights for each, and then we calculate the penalty for the interpolated examples. An example for the code of WGAN can be found here (nothing for now). For a more technical review of WGAN, check out this <a href="https://ar5iv.labs.arxiv.org/html/1904.08994">paper</a>, also available as a <a href="https://lilianweng.github.io/posts/2017-08-20-gan/">blog post</a>.</p>
<p>Next in line: Conditional GANs.</p>
<p><em>All the quoted paper from ArXiv was embedded with its corresponding Ar5iv link for the HTML version instead to support the <a href="https://ar5iv.labs.arxiv.org/">tool</a>. To change to the abstract page, follow this example:</em> <code>https://ar5iv.labs.arxiv.org/html/1409.1556</code> → <code>https://arxiv.org/abs/1409.1556</code>.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>GAN</category>
  <category>From scratch</category>
  <guid>https://hangenyuu.github.io/h-notes/posts/gan-p3/index.html</guid>
  <pubDate>Mon, 23 Jan 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Building a simple GAN</title>
  <dc:creator>Pham Nguyen Hung</dc:creator>
  <link>https://hangenyuu.github.io/h-notes/posts/gan-p2/index.html</link>
  <description><![CDATA[ 




<p>In the last post, I briefed you the history and concept of Generative Adversarial Networks (GANs). In this post, we will get more technical, going into the training process as well as trying our hand creating a simple GAN model on my favourite dataset, <a href="https://github.com/rois-codh/kmnist">KMNIST</a>.</p>
<section id="concept---training-gans" class="level1">
<h1>Concept - Training GANs:</h1>
<p>Like any training process, the process GANs can be decomposed into feed-forward and backpropagation, though with distinct features from, say, training a classifier. The parameters updated after backpropagation can also be divided into two steps, for Discriminator and Generator. These are summed up in the images below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p2/GAN-p2-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">First, in the feed-forward, we pass some random noise (denoted by <img src="https://latex.codecogs.com/png.latex?%5Cxi">) into the Generator, which outputs some fake examples (denoted by <img src="https://latex.codecogs.com/png.latex?%5Chat%7BX%7D">). The fake examples are then merged with a dataset of real examples (just <img src="https://latex.codecogs.com/png.latex?X">) and feed separately into the Discriminator, and we receive the outputs as a vector containing the possibilities of each example being real (between 0 and 1).</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p2/GAN-p2-2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Second, for training the Discriminator. We will calculate the loss as binary cross-entropy (BCE) loss for two components: how closely to 0 the Discriminator predicted the fake examples, and how closely to 1 the Discriminator predicted the real examples. Here, we need to detach the Generator from the gradient flow as we want to update the Discriminator’s parameters only</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p2/GAN-p2-3.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Third, for training the Generator. From the predictions for the fake examples, we calculate the BCE loss as how closely the Discriminator predicted them to 1. We then update the Generator’s parameters.</figcaption>
</figure>
</div>
<p>Hopefully the ideas are not too complicated. If they are so, hopefully things will make more sense when we look at the codes.</p>
</section>
<section id="hands-on---creating-gans" class="level1">
<h1>Hands-on - Creating GANs:</h1>
<section id="the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="the-dataset">The dataset:</h2>
<p>First rule: always, always look at the data first. Now, KMNIST is a dataset inspired by the MNIST dataset of 10 hand-written digits. Here, we have 10 hand-written Kanji characters. Look at the provided examples, the handwriting surely looks messy, some almost unrecognizable from the modern version.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p2/kmnist examples.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><em>The 10 classes of Kuzushiji-MNIST, with the first column showing each character’s modern hiragana counterpart. <a href="https://github.com/rois-codh/kmnist#the-dataset">Source</a></em></figcaption>
</figure>
</div>
<p>Similar to MNIST, a KMNIST image has only one channel. Let’s visualize one.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nn</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets, transforms</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_grid</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\Admin\anaconda3\envs\cb0494\Lib\site-packages\tqdm\auto.py:21: TqdmWarning:

IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function learnt from GAN's Specialization Course 1 Week 1</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tensor_show(image_tensor, num_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)):</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The original image tensor could be stored on GPU and </span></span>
<span id="cb3-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># have been flattened out for training, so we restore it</span></span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first.</span></span>
<span id="cb3-6">    image_unflat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_tensor.detach().cpu().view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>size)</span>
<span id="cb3-7">    image_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_grid(image_unflat[:num_images], nrow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torch uses (color channel, height, width) while </span></span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matplotlib used (height, width, color channel)</span></span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so we fix it here</span></span>
<span id="cb3-11">    plt.imshow(image_grid.permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).squeeze())</span>
<span id="cb3-12">    plt.show()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download needs to be set to True the first time you run it.</span></span>
<span id="cb4-2">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb4-3">dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(</span>
<span id="cb4-4">    datasets.KMNIST(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.ToTensor()),</span>
<span id="cb4-5">    batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size,</span>
<span id="cb4-6">    shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">image_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dataloader))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-2">tensor_show(image_tensor)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p2/index_files/figure-html/cell-5-output-1.png" width="424" height="415"></p>
</div>
</div>
</section>
<section id="the-discriminator" class="level2">
<h2 class="anchored" data-anchor-id="the-discriminator">The Discriminator:</h2>
<blockquote class="blockquote">
<p>The architecture for each block of Discriminator and Generator follows the suggestions from the <a href="https://ar5iv.labs.arxiv.org/html/1511.06434">Deep Convolutional GAN</a> paper.</p>
</blockquote>
<p>The Discriminator is essentially a classifier, so we can define as with a normal classifier. It means that we can start with the good ol’ linear model, but I will skip a bit to the year 2015, when DCGAN was introduced and construct my GANs with a 3-layered convolutional architecture. To conveniently construct each layer, I will also define a general function to create a layer of arbitrary sizes. A non-last layer will have a convolution followed by batch normalization and LeakyReLU (batch normalization is there to stabilize GAN’s training. We will touch upon tricks to stabilize GAN’s training in the next post).</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Discriminator(nn.Module):</span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, hidden_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>):</span>
<span id="cb6-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb6-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.disc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb6-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_disc_block(image_channel, hidden_dim),</span>
<span id="cb6-6">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_disc_block(hidden_dim, hidden_dim),</span>
<span id="cb6-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_disc_block(hidden_dim, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, final_layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb6-8">        )</span>
<span id="cb6-9"></span>
<span id="cb6-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_disc_block(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_channels, output_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, final_layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb6-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> final_layer:</span>
<span id="cb6-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(</span>
<span id="cb6-13">                    nn.Conv2d(input_channels, output_channels, kernel_size, stride),</span>
<span id="cb6-14">                    nn.BatchNorm2d(output_channels),</span>
<span id="cb6-15">                    nn.LeakyReLU(negative_slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb6-16">            )</span>
<span id="cb6-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Final Layer</span></span>
<span id="cb6-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(</span>
<span id="cb6-19">                    nn.Conv2d(input_channels, output_channels, kernel_size, stride)</span>
<span id="cb6-20">            )</span>
<span id="cb6-21">    </span>
<span id="cb6-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x: torch.Tensor):</span>
<span id="cb6-23">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.disc(x)</span>
<span id="cb6-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The input can be a tensor of multiple images</span></span>
<span id="cb6-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We want to return a tensor with the possibility</span></span>
<span id="cb6-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># of real/fake for each image.</span></span>
<span id="cb6-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x.view(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
</section>
<section id="the-generator" class="level2">
<h2 class="anchored" data-anchor-id="the-generator">The Generator:</h2>
<p>A point to note: convolution (or convolution/pooling) will reduce the dimensions of your data, essentially <em>distilling</em> the information to the output (the possibility of a class in a classifier). Meanwhile, Generator will make use of the <em>transposed convolution</em> operation, which <em>increases</em> the dimensions of data, essentially <em>magnifying</em> the noises into an image. (I will create a blog post about convolution in the future, in the meantime, check out this <a href="https://github.com/HangenYuu/vision_learner/blob/main/ARCHITECTURE/CNN/Tiny/TinyCNN.ipynb">notebook</a> as my draft.)</p>
<p>First, we need a function to generate noise. Basically, we need some tensor containing random numbers, and we can conveniently return a tensor filled with random numbers from a normal distribution with <code>torch.randn()</code>. For the dimensions, we define argument <code>z_dim</code> as the dimension of the noise input, and <code>n_samples</code> as the number of samples we need.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_noise(n_samples, z_dim, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>):</span>
<span id="cb7-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> torch.randn((n_samples, z_dim), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span></code></pre></div>
</div>
<p>For the <code>Generator</code> class, I will also create a function to construct each layer. A non-last layer will have a transposed convolution, followed by batch normalization and ReLU activation. The final layer does not have batch normalization but will have Tanh activation to squish the pixels in range.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Generator(nn.Module):</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, image_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, hidden_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>):</span>
<span id="cb8-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># z_dim is the dimension of the input noise vector</span></span>
<span id="cb8-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.z_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_dim</span>
<span id="cb8-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb8-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_gen_block(z_dim, hidden_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb8-8">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_gen_block(hidden_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, hidden_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb8-9">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_gen_block(hidden_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, hidden_dim),</span>
<span id="cb8-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_gen_block(hidden_dim, image_channel, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, final_layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb8-11">        )</span>
<span id="cb8-12">    </span>
<span id="cb8-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_gen_block(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_channels, output_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, final_layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb8-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> final_layer:</span>
<span id="cb8-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(</span>
<span id="cb8-16">                nn.ConvTranspose2d(input_channels, output_channels, kernel_size, stride),</span>
<span id="cb8-17">                nn.BatchNorm2d(output_channels),</span>
<span id="cb8-18">                nn.ReLU()</span>
<span id="cb8-19">            )</span>
<span id="cb8-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Final Layer</span></span>
<span id="cb8-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nn.Sequential(</span>
<span id="cb8-22">                nn.ConvTranspose2d(input_channels, output_channels, kernel_size, stride),</span>
<span id="cb8-23">                nn.Tanh()</span>
<span id="cb8-24">            )</span>
<span id="cb8-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recall torch expect an image to be in the form (color channel, height, width).</span></span>
<span id="cb8-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In a batch, torch expects it to be (no. of images in batch, color channel, height, width)</span></span>
<span id="cb8-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># So we need to transform the noise, originally in (no. of images in batch, input dimension)</span></span>
<span id="cb8-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to (no. of images in batch, input dimension, 1, 1)</span></span>
<span id="cb8-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># See more here:</span></span>
<span id="cb8-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://pytorch.org/vision/stable/transforms.html#transforming-and-augmenting-images</span></span>
<span id="cb8-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> unsqueeze_noise(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, noise):</span>
<span id="cb8-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> noise.view(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(noise), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.z_dim, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-33"></span>
<span id="cb8-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, noise):</span>
<span id="cb8-35">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unsqueeze_noise(noise)</span>
<span id="cb8-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen(x)</span></code></pre></div>
</div>
</section>
<section id="optimizers-and-criterion" class="level2">
<h2 class="anchored" data-anchor-id="optimizers-and-criterion">Optimizers and Criterion</h2>
<p>Next, we want to define our optimizers (one for each model) and our criterion.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We do not have activation at the output for Discriminator, so the outputs</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># are raw (logits).</span></span>
<span id="cb9-3">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BCEWithLogitsLoss()</span>
<span id="cb9-4">z_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb9-5">display_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb9-6">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate of 0.0002 and beta_1 (momentum term for Adam optimizer) of </span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0.5 works well for DCGAN, according to the paper (yes, I seriously searched</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for keyword "learning rate" in the paper)</span></span>
<span id="cb9-10">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0002</span></span>
<span id="cb9-11">beta_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> </span>
<span id="cb9-12">beta_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.999</span></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Device-agnostic code</span></span>
<span id="cb9-14">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb9-15"></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can tranform the image values to be between -1 and 1 (the range of the Tanh activation)</span></span>
<span id="cb9-17">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb9-18">    transforms.ToTensor(),</span>
<span id="cb9-19">    transforms.Normalize((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,)),</span>
<span id="cb9-20">])</span>
<span id="cb9-21"></span>
<span id="cb9-22">dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(</span>
<span id="cb9-23">    datasets.KMNIST(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform),</span>
<span id="cb9-24">    batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size,</span>
<span id="cb9-25">    shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Generator(z_dim).to(device)</span>
<span id="cb10-2">gen_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(gen.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, betas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(beta_1, beta_2))</span>
<span id="cb10-3">disc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Discriminator().to(device) </span>
<span id="cb10-4">disc_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(disc.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, betas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(beta_1, beta_2))</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You initialize the weights to the normal distribution</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with mean 0 and standard deviation 0.02</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Yes, the paper said so.)</span></span>
<span id="cb10-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> weights_init(m):</span>
<span id="cb10-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(m, nn.Conv2d) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(m, nn.ConvTranspose2d):</span>
<span id="cb10-11">        torch.nn.init.normal_(m.weight, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)</span>
<span id="cb10-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(m, nn.BatchNorm2d):</span>
<span id="cb10-13">        torch.nn.init.normal_(m.weight, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>)</span>
<span id="cb10-14">        torch.nn.init.constant_(m.bias, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply recursively weights_init() according to the docs:</span></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.apply</span></span>
<span id="cb10-17">gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(weights_init)</span>
<span id="cb10-18">disc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> disc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(weights_init)</span></code></pre></div>
</div>
</section>
<section id="training" class="level2">
<h2 class="anchored" data-anchor-id="training">Training</h2>
<p>Okay, now onto training!</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">n_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb11-2">cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For visualization purpose</span></span>
<span id="cb11-3">mean_generator_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-4">mean_discriminator_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_epochs):</span>
<span id="cb11-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> real, _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(dataloader):</span>
<span id="cb11-7">        cur_batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(real)</span>
<span id="cb11-8">        real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> real.to(device)</span>
<span id="cb11-9"></span>
<span id="cb11-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Update Discriminator</span></span>
<span id="cb11-11"></span>
<span id="cb11-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty the optimizer</span></span>
<span id="cb11-13">        disc_opt.zero_grad()</span>
<span id="cb11-14"></span>
<span id="cb11-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate noise and pass through Discriminator for fake examples</span></span>
<span id="cb11-16">        fake_noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_noise(cur_batch_size, z_dim, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb11-17">        fake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen(fake_noise)</span>
<span id="cb11-18">        disc_fake_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> disc(fake.detach())</span>
<span id="cb11-19"></span>
<span id="cb11-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate loss</span></span>
<span id="cb11-21">        disc_fake_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(disc_fake_pred, torch.zeros_like(disc_fake_pred))</span>
<span id="cb11-22"></span>
<span id="cb11-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Same for real examples</span></span>
<span id="cb11-24">        disc_real_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> disc(real)</span>
<span id="cb11-25">        disc_real_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(disc_real_pred, torch.ones_like(disc_real_pred))</span>
<span id="cb11-26"></span>
<span id="cb11-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The Discriminator's loss is the average of the two</span></span>
<span id="cb11-28">        disc_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (disc_fake_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> disc_real_loss) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb11-29"></span>
<span id="cb11-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep track of the average Discriminator loss</span></span>
<span id="cb11-31">        mean_discriminator_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> disc_loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> display_step</span>
<span id="cb11-32"></span>
<span id="cb11-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update Discriminator's gradients a.k.a backpropagation</span></span>
<span id="cb11-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normally don't set retain_graph=True, but we do so for GAN</span></span>
<span id="cb11-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as we need to propagate through the graph a second time</span></span>
<span id="cb11-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># when updating the Generator.</span></span>
<span id="cb11-37">        disc_loss.backward(retain_graph<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-38"></span>
<span id="cb11-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update Discriminator's optimizer</span></span>
<span id="cb11-40">        disc_opt.step()</span>
<span id="cb11-41"></span>
<span id="cb11-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Update Generator</span></span>
<span id="cb11-43"></span>
<span id="cb11-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty the optimizer</span></span>
<span id="cb11-45">        gen_opt.zero_grad()</span>
<span id="cb11-46"></span>
<span id="cb11-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate noise and pass through Discriminator for fake examples</span></span>
<span id="cb11-48">        fake_noise_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_noise(cur_batch_size, z_dim, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb11-49">        fake_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen(fake_noise_2)</span>
<span id="cb11-50">        disc_fake_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> disc(fake_2)</span>
<span id="cb11-51"></span>
<span id="cb11-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate loss</span></span>
<span id="cb11-53">        gen_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(disc_fake_pred, torch.ones_like(disc_fake_pred))</span>
<span id="cb11-54"></span>
<span id="cb11-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation for Generator's loss</span></span>
<span id="cb11-56">        gen_loss.backward()</span>
<span id="cb11-57"></span>
<span id="cb11-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update Generator's optimizer</span></span>
<span id="cb11-59">        gen_opt.step()</span>
<span id="cb11-60"></span>
<span id="cb11-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep track of the average Generator loss</span></span>
<span id="cb11-62">        mean_generator_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> gen_loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> display_step</span>
<span id="cb11-63"></span>
<span id="cb11-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Visualization code</span></span>
<span id="cb11-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> display_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb11-66">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cur_step<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: Generator loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_generator_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Discriminator loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_discriminator_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-67">            tensor_show(fake)</span>
<span id="cb11-68">            tensor_show(real)</span>
<span id="cb11-69">            mean_generator_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-70">            mean_discriminator_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-71">        cur_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</section>
</section>
<section id="results" class="level1">
<h1>Results:</h1>
<p>After training for 100 epochs with the settings, I received the final results. <img src="https://hangenyuu.github.io/h-notes/posts/gan-p2/Screenshot 2023-01-23 175133.png" class="img-fluid" alt="The above were the generated images, and the below were the real images."></p>
<p>One definitely can still discern which kanji characters were real and which were fake. However, one must admit that the model did manage to learn some of the intricate features of Japanese calligraphy. Then, after another 100 epochs… <img src="https://hangenyuu.github.io/h-notes/posts/gan-p2/Screenshot 2023-01-23 183057.png" class="img-fluid"></p>
<p>While it is still not yet indistinguishables, the Generator has gotten very close. The third image in the first row or the one at bottom left corner could definitely be passed off as real ones.</p>
</section>
<section id="end-of-part-2" class="level1">
<h1>End of part 2</h1>
<p>In this part, I have walked you through the training process and the building blocks of GANS. We have trained and witness good results from a simple model on the KMNIST dataset. In the next part, we will continue with the development of GANs, namely different ways to make training more stable. Up to now, it seemed really easy to achieve relatively good result with GANs (to be honest, we haven’t tried anything too complicated, too), but it will much harder when we touch upon larger models. See you then.</p>
<p><em>All the quoted paper from ArXiv was embedded with its corresponding Ar5iv link for the HTML version instead to support the <a href="https://ar5iv.labs.arxiv.org/">tool</a>. To change to the abstract page, follow this example:</em> <code>https://ar5iv.labs.arxiv.org/html/1409.1556</code> → <code>https://arxiv.org/abs/1409.1556</code>.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>GAN</category>
  <category>From scratch</category>
  <guid>https://hangenyuu.github.io/h-notes/posts/gan-p2/index.html</guid>
  <pubDate>Sun, 22 Jan 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>A Primer on Generative Adversarial Networks (GANs)</title>
  <dc:creator>Pham Nguyen Hung</dc:creator>
  <link>https://hangenyuu.github.io/h-notes/posts/gan-p1/index.html</link>
  <description><![CDATA[ 




<p>If you have studied deep learning before, you will notice that we will encounter classification many times. To be honest, it is fun in a way, having your own model to classify anime characters. Alas, it is a bit dry to me. Intelligence, for me, is creativity, the ability to create something <em>new</em>. I want a model that can create, especially work of art. That led me right to GANs, not so much a model but an elegant way of thinking.</p>
<section id="a-brief-history-of-gans" class="level1">
<h1>A brief history of GANs</h1>
<p><em>For a fuller account, check out the <a href="https://www.technologyreview.com/2018/02/21/145289/the-ganfather-the-man-whos-given-machines-the-gift-of-imagination/">MIT Technology Review article</a>.</em></p>
<p>Back in 2014, computer vision had witnessed the power of deep learning. One must not look no further than the entries for the ImageNet challenge, with the introduction of very deep models from <a href="https://papers.nips.cc/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf">AlexNet</a> to <a href="https://ar5iv.labs.arxiv.org/html/1409.1556">VGG</a>. (Not to mention <a href="https://ar5iv.labs.arxiv.org/html/1512.03385">ResNet</a> in 2015, an architecture with so interesting an idea that I had to <a href="https://github.com/HangenYuu/vision_learner/tree/main/ARCHITECTURE/CNN/Paper">make a project</a> for it.) However, as discerning and mature as these models could get in classification, they were nascent in generating data: results were blurry images or with weird artifact. “Complex statistical analysis of the elements that make up a photograph” was proposed but would not work. We needed a simpler, more elegant way of solving the problem. And the solution arrived in Goodfellow’s seminal paper, <a href="https://ar5iv.labs.arxiv.org/html/1406.2661">Generative Adversarial Nets</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p1/Screenshot 2023-01-20 at 19-53-43 Generative Dog Images Kaggle.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><em>The image was not from the era, but was representative of what you got from the model at that time (and still now with GANs, if your model was trained poorly or prematurely). <a href="https://www.kaggle.com/c/generative-dog-images/discussion/97753">Source</a></em></figcaption>
</figure>
</div>
<p>Now I wanted to make two quick detours before going into the inside of GANs:</p>
<ol type="1">
<li>At its core sense, a <em>function</em> is a set of rule(s) to describe how inputs should be matched with outputs. For each problem that we pose to a neural network, there exists an optimal function to do so. The easiest example is image classification, with the optimal function being a human being (with many constraints behind, but yes, humans still surpass machines in this). If we think this way, then training a model is <em>trying to update its parameters such that the model will approximate the optimal function as closely as possible</em>. Neural networks thus are powerful because they can approximate very complex functions, such as the neural configuration in our head that map these pixels of a tree to the word “tree”.</li>
<li>Advances in neural network came about with backpropagation. Neural network could be powerful, yes, but at that time (before the 90s) there existed no easy and computationally cheap way to update the parameters. Then there was backpropagation. The parameters could now be initialized randomly at the beginning, and then be updated incrementally with the gradient of the loss value with it. In other words, now we can start from (almost) anywhere because we have this amazing magical map that can tell the next direction that we need to take.</li>
</ol>
</section>
<section id="the-gans-game" class="level1">
<h1>The GANs game:</h1>
<p><strong>Note:</strong> I will use digital images as examples to describe GANs. A quick introduction: images are stored as matrices of numbers inside computer’s memory. It we are talking about a black and white image, its content could be divided into discrete squares called pixels; each pixel stores a number describing the intensity of light at the pixel, with 0 for black and 255 for white, and numbers in-between for the shades of gray. If we are referring to colored images, we will have three matrices for intensity of red, green, and blue. This means that to generate images, we just need to generate one matrix or three matrices of certain dimensions, which could be displayed to the screen later.</p>
<p>The word “adversarial” in GAN means “involving or characterized by conflict or opposition” according to Oxford Dictionary. Simply put, a GANs’ system consists of, instead of one, two neural networks pitted against each other. The first one is called <em>Generator</em>, its inputs will be some random numbers, and its output will be the matrix or matrices described above. The second one is called <em>Discriminator</em>, (or <em>Critic</em>, which we will meet later), its inputs will be some real images and the generated images, its output will classification of the image it sees (ideally 0 for real images and 1 for generated images). An analogy is we have the real images as a pile of real antique paintings, the Generator as a forger, the generated images as a pile of forged paintings, and the Discriminator as an appraiser trying to discern the two piles.</p>
<table class="table">
<thead>
<tr class="header">
<th></th>
<th><strong>Generator</strong></th>
<th><strong>Discriminator</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Input</strong></td>
<td>Random numbers</td>
<td>Images (real &amp; generated)</td>
</tr>
<tr class="even">
<td><strong>Output</strong></td>
<td>Images</td>
<td>Class of image (binary)</td>
</tr>
<tr class="odd">
<td><strong>Role</strong></td>
<td>Forger</td>
<td>Appraiser</td>
</tr>
</tbody>
</table>
<p><strong>Quick detour:</strong> the GAN concept advances generative AI the same way backpropagation does so. The approach of trying to know the distribution of the image features was right, but the method was wrong a.k.a too complex and computationally expensive. With GAN, we have an elegant way to start with any random distribution while moving towards the optimal distribution incrementally. No need to know everything any more.</p>
<p>Our loss function will be the good ol’ binary cross-entropy: <img src="https://latex.codecogs.com/png.latex?J(%5Ctheta)%20=%20-%5Cfrac%7B1%7D%7Bm%7D*%5By%5E%7B(i)%7Dlog(h(x%5E%7B(i)%7D,%20%5Ctheta))%20+%20(1%20-%20y%5E%7B(i)%7D)log(1%20-%20(h(x%5E%7B(i)%7D,%20%5Ctheta)))%5D"></p>
<p>That surely looks very intimidating, but one must not let symbols and numbers get in the way of intuition. One just need to know <img src="https://latex.codecogs.com/png.latex?y%5E%7B(i)%7D"> is the true label of the i<sup>th</sup> example (0 or 1), <img src="https://latex.codecogs.com/png.latex?h(x%5E%7B(i)%7D,%20%5Ctheta)"> is the predicted label for the i<sup>th</sup> example with input <img src="https://latex.codecogs.com/png.latex?x%5E%7B(i)%7D"> and parameters <img src="https://latex.codecogs.com/png.latex?%5Ctheta">. With this information, it is easy to realize that the loss will be 0 if the predicted label is the true label and infinitely large otherwise.</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the BCE function</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> bce(y_true, y_pred):</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>torch.log(y_pred) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y_true)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>torch.log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y_pred))</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-2">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">plt.figure()</span>
<span id="cb2-5">plt.plot(y_pred, bce(y_true, y_pred), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o--"</span>)</span>
<span id="cb2-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prediction"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb2-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loss"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb2-8">plt.grid()</span>
<span id="cb2-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-0" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p1/index_files/figure-html/fig-0-output-1.png" width="605" height="446" class="figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;1: BCE loss when y = 0</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb3-2">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb3-3">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.BCELoss(reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">plt.figure()</span>
<span id="cb3-6">plt.plot(y_pred, bce(y_true, y_pred), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o--"</span>)</span>
<span id="cb3-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prediction"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb3-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loss"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>)</span>
<span id="cb3-9">plt.grid()</span>
<span id="cb3-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-1" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://hangenyuu.github.io/h-notes/posts/gan-p1/index_files/figure-html/fig-1-output-1.png" width="605" height="446" class="figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;2: BCE loss when y = 1</figcaption>
</figure>
</div>
</div>
</div>
<p>I mentioned that this is a conflict between Generator and Discriminator. For Discriminator, it wants to classify correctly i.e.&nbsp;catch the Generator every time while approve the value of the real images. In other words, it wants to <em>minimize</em> its loss function. For Generator, it wants the reverse i.e.&nbsp;pass a fake as a real to the Discriminator every single time. In other words, it wants to <em>maximize</em> the loss function (of the Discriminator). This leads to the ter <em>minimax game</em> that you may hear some people use to describe GAN.</p>
<p>The game can be considered complete when the Discriminator’s accuracy drops to 50% i.e.&nbsp;it can no longer discern, and essentially has to guess at random for each image. At this, our Generator will become potent enough to fool even us with its <a href="https://thispersondoesnotexist.com/">humans</a> and <a href="https://thiscatdoesnotexist.com/">cats</a>.</p>
</section>
<section id="end-of-part-1" class="level1">
<h1>End of part 1:</h1>
<p>As a primer this is far enough. I will continue on the subject, describing each model’s simplest architecture possible, the process of training one, as well as the difficulty in training GANs. (Training a model is hard enough, now we have two.)</p>
<p><em>All the quoted paper from ArXiv was embedded with its corresponding Ar5iv link for the HTML version instead to support the <a href="https://ar5iv.labs.arxiv.org/">tool</a>. To change to the abstract page, follow this example:</em> <code>https://ar5iv.labs.arxiv.org/html/1409.1556</code> → <code>https://arxiv.org/abs/1409.1556</code>.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>GAN</category>
  <category>From scratch</category>
  <guid>https://hangenyuu.github.io/h-notes/posts/gan-p1/index.html</guid>
  <pubDate>Fri, 20 Jan 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Hello World</title>
  <dc:creator>Pham Nguyen Hung</dc:creator>
  <link>https://hangenyuu.github.io/h-notes/posts/hello_world/index.html</link>
  <description><![CDATA[ 




<section id="up-and-running-with-quarto" class="level2">
<h2 class="anchored" data-anchor-id="up-and-running-with-quarto">Up and running with Quarto!</h2>
<div id="hello-world" class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World!"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hello World!</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>new</category>
  <category>code</category>
  <guid>https://hangenyuu.github.io/h-notes/posts/hello_world/index.html</guid>
  <pubDate>Fri, 21 Oct 2022 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
