---
title: "Set up Quarto on the cloud with Github Codespace"
subtitle: "Easy and convenient"
author: "Pham Nguyen Hung"
draft: false
date: last-modified
categories: [Fun]
format:
    html:
        toc: true
        code-fold: false
jupyter:
    kernelspec:
        name: "cb0494"
        language: "python"
        display_name: "cb0494"
---
This will be a concise one. 

So far, I wrote my blog posts from my laptop. It works, but sometimes I am worried about the hardware damage (recently I have to render a triple-nested for loop ~20 times) and I am curious about the new Github Codespace. Hence, I tried to set up a Codespace environment for writing my blog.

# Requirements

I used [Quarto](https://quarto.org/docs/get-started/) to create my blog. It is a cross between Jupyter Notebook and markdown language. Essentially, I can render a Notebook into a blog post, with the style of my choice. A development environment to do so have to have Python (3.11.3 to match the one on my PC) with various packages such as `jupyter`, `ipykernel`, `nbformat`, `nbconvert` and some specfic ones (`pytorch`, `matplotlib`, `fastcore` for my case). Most of all, it has to have [Quarto-CLI](https://quarto.org/docs/download/).

# Installations

The best thing is the Codespace comes with the VSCode UI that I am familiar with.

First step, a bunch of extensions: Python, Jupyter, and Quarto (and GitHub Copilot). VSCode is great: the IDE is free, it is open-sourced so you see it everywhere, even in the browser like this, it is lightweight and versatile with changing simply as installing an extension.

Second step, Python. The Codespace is contained within a Docker Image with the wrong Python, but it comes with `conda`, so I just have to create a virtual environment.

Third step, Quarto-CLI. The Codespace runs on Ubuntu with standard `bash` shell, so following the link above, we should get the `.deb` file. It is as simple as
```bash
# The version may vary
wget https://github.com/quarto-dev/quarto-cli/releases/download/v1.3.353/quarto-1.3.353-linux-amd64.deb
```
And then install with
```bash
# We have sudo privilege
# Assume you are in the same folder as the .deb file
sudo apt install ./quarto-1.3.353-linux-amd64.deb
```
And we are done. The Codespace in browser refreshes automatically, so if you have installed the Quarto extension, now it will display Quarto version at the bottom. Or you can install it.

![](Screenshot 2023-05-25 214843.png)

Now you can check by following the [Get Started for VSCode](https://quarto.org/docs/get-started/hello/vscode.html). If you successfully render it, you are good!

**Note:** There is also a tutorial for installation with tarball. If you are tech-savvy, it will work. However, it does not work for me. It seems that yes, I am sudo in this container, but no, I cannot view files or folders other than the ones in my repo, so I don't really know what is going on behind the scene.

# Usage

If you followed the tutorial above, you will see that the rendered output is automatically opened inside the screen. Alternatively, you can click on the auto-forwarded link in the terminal to view rendered file. Otherwise, the workflow is the same as the desktop, though this time I do it in browser

![*Full screenshot of what is going on. This blog post was written entirely in my new Codespace*](Screenshot 2023-05-25 215705.png)

# Cost

GitHub comes with a lot of freebies. Simply, you are billed based on hours used times number of cores of your VM. The default one is 2-core, and you can upgrade it to 4-core. For larger ones, you need to contact GitHub themselves. Each month, you have a free quota of 120 core hours (180 core hours for Student/Pro). That means I can write for 3 hours a day every month at 2-core VM. Details can be found [here](https://docs.github.com/en/billing/managing-billing-for-github-codespaces/about-billing-for-github-codespaces). You can view your current usage [here](https://docs.github.com/en/billing/managing-billing-for-github-codespaces/viewing-your-github-codespaces-usage). It will display something such as this

![*Usage*](Screenshot 2023-05-25 220402.png)

During writing, I purposefully closed the window to check if I lost the data (not well though out, that one). The VM will bear your uncommited changes as long as it is active, and it only shut downs if you do so or after some long time (longer than some seconds between closing tab and reopening). That is even a greater relief.

# Conclusion

Well, that's all! Thank you for your attention. And also note that the isntructions can be used to install Quarto-CLI and start developing in any Ubuntu OS machine.

