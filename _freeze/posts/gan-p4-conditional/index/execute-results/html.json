{
  "hash": "61816b1ab48412d3e0b0ec39230e02c0",
  "result": {
    "markdown": "---\ntitle: Conditional & Controllable GAN\nsubtitle: My notes on taking the specialization by deeplearning.ai series\nauthor: Pham Nguyen Hung\ndraft: false\ndate: '2023-02-12'\ncategories:\n  - code\n  - GAN\nformat:\n  html:\n    toc: true\n    code-fold: true\n---\n\nApologize for being late: it has been nearly 3 weeks already since the latest post. But I am back for the last week of content.\n\nWhen I started writing, it was near the time to bed, and without a doubt, I am hungry. So let's deal with cookies this time.\n\nUp until now, our GAN has managed to do some interesting stuff (\"writing\" Kanji characters, or numbers, if you used the traditional MNIST dataset). However, one thing you must notice is that we have *no* control over what the Generator will give us. It can be a \"na\", it can be a \"tsu\", it can be a \"ki\" - no control whatsoever. In our cookie analogy, our current Generator is like a goodwilled roomie who bakes for us every day, but each day we will receive a random cookie type.\n\n![*You know it is cookie, but you have no idea what type is it*](cookie 1.png)\n\nNow, if you love randomness and can tolerate the taste as well as the sugar, fine. But we usually want our model to be *controllable*, that is, we get to decide (to some extent) what will be included in the output.\n\n![*It's much nicer to control that you have matcha on Monday, chocochip on Tuesday, and so on.*](cookie 2.png)\n\nWith the objective set, let's explore way to implement controllable GAN a.k.a way to make sure we have the correct cookie each day.\n\n# Limiting to just one category:\n\nThis is a no-brainer solution. To prevent random category generation (and mode collapse as well), who don't just feed in data of a single class only? It is like always mixing matcha powder into the dough to make the cookies, ensuring that every day we will get matcha cookies.\n\n![*A matcha cookie junkie's dream.*](cookie 3.png)\n\nObviously this solution is for when you want to generate examples of one class only. One example would be augmenting data for brain EMR of a certain disease at a certain region. The other ~~trolled~~ example is [GANyu](https://www.kaggle.com/datasets/andy8744/ganyu-genshin-impact-anime-faces-gan-training), a dataset and models fine-tuned on it for the task of generating faces of the Genshin Impact character Ganyu (Check out the [GA(N)Rem](https://www.kaggle.com/datasets/andy8744/rezero-rem-anime-faces-for-gan-training) as well).\n\n> I don't know what is the thing for animes and GANs, but the moment I discovered GANs, I instantly thought of generating anime girls' faces. Is is the same phenomenon as researchers in the 90's instantly thought of classifying cat from everything else the moment they got a decent classifier... - A certain unfamous author on the web\n\nMoving to more general (and sensible) solution, we must take note of a crucial principle: we cannot generate something that the model has not ever seen before. It's like we need to give matcha powder to our dear friend if we expect him to bake us some matcha cookies. This principle is handy in exploring the two solutions. The two approaches will both involve tampering with the input noise vector $z$. While one focuses on the *class/label* of the generated, the other focuses on the *features* of the generated.\n\n# Conditional Generation (Control the class):\n\n[Conditional Generative Adversarial Nets](https://arxiv.org/pdf/1411.1784.pdf) was a solution to make GAN more controllable, by passing some extra information $y$ (the easiest is class labels, as one-hot vector) with the data fed to Generator and Discriminator. Here is an illustrated example and implementation:\n\n![*An input vector to Generator now is made up of two components: noise inputs (to ensure that each generation will be unique) & one-hot class vector (to ensure that the generate example will be of the class we want)*](cgan 1.png)\n\n![*Similarly, an input to the Discriminator now is an image together with the an one-hot class vector. For an example to be regarded as real, not only it needs to look realistic (reflected by a low binary corss-entropy or Wasserstein loss) but it also needs to look like real examples from the same class. Here, an original matcha cookie definitely looks like a matcha cookie.*](cgan 2.png)\n\n![*Here is the earlier generated matcha cookie. Let's say that our Discriminator is a bit better than the Generator. It means that it will detect this looks rather like a matcha cookie, but not too alike.*](cgan 3.png)\n\n![*Now suppose that the required class is black chocochip, but our Generator gives a matcha cookie. The Discriminator will recognize in this case and gives a low chance that the example is real.*](cgan 4.png)\n\nThe question now is how do we go on implementing this? From the descriptions, it seems that we need to do 2 things: 1) figure a way to pass the additional information into our two models and 2) update the loss function. 2) is trivial, as the same loss function (binary cross-entropy) can be used and we just need to make sure that the class of the examples are included in the output as well. For 1), in the case of Generator, you just need to concatenate it with the noise vector above. For Discriminator, it is a bit trickier. We feed the images in by passing values of three channels, so the simplest way will be to create n channels more for n classes. This way works for dataset such as the good ol' MNIST, whether we flatten out images before concatentating or we keep the same matrix and just call `torch.cat()` (which will create 10 more channels, each of size 28*28, with one of them full of 1 and the rest full of 0). For larger images or ones we do not want to flatten, this simple approach will create a huge memory issue. We will want to pass class information in differently, such as via a different head of input layer, but that is outside of this post scope. Here are the code snippets for the easy case.\n\n```python\nimport torch\nimport torch.nn.functional as F\n\ndef get_one_hot_labels(labels: torch.Tensor, n_classes: int):\n    '''\n    Function for creating one-hot vectors for the data.\n\n    :param labels: a vector containing the labels of all examples in a batch.\n                   Get from each DataLoader. Have shape (n_samples, 1)\n    :param n_classes: an integer for number of classes in the data.\n                      Get from the dataset created\n    :return: the one-hot vector for a batch of data\n    '''\n    return F.one_hot(labels,n_classes)\n\ndef combine_vectors(x, y):\n    '''\n    Generic function for combining two 2-D maxtrices with the same 0-shape\n    In our case, they will be (n_samples, x_1) and (n_samples, y_1).\n\n    :param x: the first matrix, shape (n_samples, x_1)\n    :param y: the second matrix, shape (n_samples, y_1)\n    :return: the concatenated matrix of shape (n_samples, x_1 + y_1)\n    '''\n    # To ensure unity of data types, we want the return matrix to have float\n    # type.\n    combined = torch.cat((x.float(),y.float()), 1)\n    return combined\n```\n\n```python\n# Code will not run if just copy-paste\n# Pre-training\n# Just the basic part.\nkmnist_shape = (1, 28, 28)\nn_classes = 10\n\ndevice = 'cuda' if torch.cuda.available() else 'cpu'\ncriterion = nn.BCEWithLogitsLoss()\nz_dim = 64 # Size of the noise vector\ngen = Generator(input_dim=generator_input_dim).to(device)\ngen_opt = torch.optim.Adam(gen.parameters(), lr=lr)\ndisc = Discriminator(im_chan=discriminator_im_chan).to(device)\ndisc_opt = torch.optim.Adam(disc.parameters(), lr=lr)\nepochs = 200\n\ndef weights_init(m):\n    if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):\n        torch.nn.init.normal_(m.weight, 0.0, 0.02)\n    if isinstance(m, nn.BatchNorm2d):\n        torch.nn.init.normal_(m.weight, 0.0, 0.02)\n        torch.nn.init.constant_(m.bias, 0)\ngen = gen.apply(weights_init)\ndisc = disc.apply(weights_init)\n\n# Training loop\ncur_step = 0\ngenerator_losses = []\ndiscriminator_losses = []\n\nfor epoch in range(epochs):\n    for real, labels in tqdm(dataloader):\n        n_samples = len(real)\n        real = real.to(device)\n\n        # Get image one-hot labels for this batch\n        one_hot_labels = get_one_hot_labels(labels.to(device), n_classes)\n        # Remember that the DataLoader is in size (n_samples, 1, 28, 28) while the one hot label matrix \n        # has size (n_samples, 1). We need to extend 2 more dimensions if we want to concatenate the two.\n        image_one_hot_labels = one_hot_labels[:, :, None, None]\n        # Now the one-hot labels matrix has size (n_samples, 1, 1, 1). We need to turn it into\n        # (n_samples, 1, 28, 28) to pass into the input layer.\n        image_one_hot_labels = image_one_hot_labels.repeat(1, 1, kmnist_shape[1], kmnist_shape[2])\n\n        ### Update discriminator\n        # Zero out the discriminator gradients\n        disc_opt.zero_grad()\n\n        # Get noise corresponding to the current batch_size \n        fake_noise = get_noise(n_samples, z_dim, device=device)\n        \n        # Combine the label and the noise and generate fake examples\n        noise_and_labels = combine_vectors(fake_noise, one_hot_labels)\n        fake = gen(noise_and_labels)\n\n        # Get Discriminator's predictiopn on the real and the fake examples\n        fake_image_and_labels = combine_vectors(fake, image_one_hot_labels)\n        real_image_and_labels = combine_vectors(real, image_one_hot_labels)\n        disc_fake_pred = disc(fake_image_and_labels.detach()) # do not update the Generator\n        disc_real_pred = disc(real_image_and_labels)\n\n        # Calculate loss\n        disc_fake_loss = criterion(disc_fake_pred, torch.zeros_like(disc_fake_pred))\n        disc_real_loss = criterion(disc_real_pred, torch.ones_like(disc_real_pred))\n        disc_loss = (disc_fake_loss + disc_real_loss) / 2\n\n        # Backpropagation\n        disc_loss.backward(retain_graph=True)\n\n        # Update the parameters\n        disc_opt.step()\n\n        # Keep track of the average discriminator loss for visualization\n        discriminator_losses += [disc_loss.item()]\n\n        ### Update generator\n        # Zero out the generator gradients\n        gen_opt.zero_grad()\n\n        # Regenerate the fake examples with gradients to update\n        fake_image_and_labels = combine_vectors(fake, image_one_hot_labels)\n        disc_fake_pred = disc(fake_image_and_labels)\n\n        # Calculate loss\n        gen_loss = criterion(disc_fake_pred, torch.ones_like(disc_fake_pred))\n\n        # Backpropgation\n        gen_loss.backward()\n\n        # Update the parameters\n        gen_opt.step()\n\n        # Keep track of the generator losses for visualization\n        generator_losses += [gen_loss.item()]\n```\n\n# Controllable Generation (Control the feature):\n\nUp until now, the noise vector fed into GANs is just \"noise\" - meaningless. However, the numbers in the noise vector do mean something. You can think that each number represent one feature that is recognized by the Generator. The combinations of all these features form a *latent space* - a space containing a simpler but hidden (to humans) representation of generated examples. This is best understood with the example of amino acid.\n\nThe basic of every bodily function is protein, which is a chain of amino acids (you don't need to know what they are). Each amino acid in the chain is encoded as a sequence of 3 nucleotides, which have 4 in total (there are $4^{3}=64$ total combinations, but several combinations encoding the same amino acid, and there are special ones called *ending combinations* that signify the end but do not encode).\n\nAll the 64 combinations can thought of as the *latent space* of the amino acid. It's like we have a well-trained Generator on 22 classes that output the exact amino acid or ending signal we want by passing into it certain 3 nucleotides. This is a latent space because the information has been simplified, but it is not quite latent because we now know the exact encoding of the information.\n\n![*[\"The genetic code\"](https://openstax.org/books/biology/pages/15-1-the-genetic-code#fig-ch15_01_04) by OpenStax College, Biology*](genetic code.png)\n\nIn our KMNIST example, each image can be represented as a 28 by 28 matrix where each position stores the intensity of the pixel. It can be visualized as below.\n\n![*A certain Japanese letter*](KMNIST eg.png)\n\nIn the noise vector above, we try to compress this information down to a vector of 64 numbers (recalling the `z_dim` above), hoping that this is sufficient to store the information to construct all 10 classes of handwritten kanji characters. But let's fall back to our cookies for a more easily visualizable example.\n\n![*Before, we have been generating random numbers in the noise vector. Let's say that we have been able to decode that the second number in our noise vector encodes information for color of the cookie, with 2.1 signifies the green matcha color we wants.*](cgan 5.png)\n\n![*Now, after training, we now know that 1.4 corresponds to the brown color of chochip cookies. We can now pass the number to get a brown cookie.*](cgan 6.png)\n\nIn reality, there are multiple things to note in implementation. One unfortunate thing was the DNA analogy extends to the noise space. A feature is often not influenced by a single value of the noise vector alone but depends on many ones. This is called *entanglement*, which mostly arises from having a noise vector with dimension smaller than the number of features we want to control. Entanglemnt affects our controllability: if two or more features' values significantly depend on the same noise value, then changing it will shift all of them while we may want one to change. Therefore, we want to encourage *disentanglement* of features in two ways: \n\n1. Ensure noise vector has enough data slots. You cannot expect disentanglement of 10 features if your noise vector only has 9 slots. Always have a noise vector with dimension at least the number of modifiable features you want\n2. As a regularization. \n\nIn practice, we will not learn the exact encoding (such as 2.1 for green or 1.4 for brown as above) but how the feature change with varying number (say, from green to brown by decreasing the $2^{nd}$ number of the noise vector). You do this with, well, a classifier and label. First, you freeze the weight of the Generator. Then you classify the generated examples based on whether they have the feature(s) or not. Afterwards, you *update the noise vector* based on the loss function with backpropagation. That is the most simple (and laziest) way to update the noise vector, making it the greatest way (for we always want to do the most work with the least effort). Of course, now we need a pre-trained classifier on the feature(s) that we are trying to detect. If we do not, then we will need to train one on our own i.e. more work to do. You can observe the gradual change in the demo video below for the famous paper on the subject [Interpreting the Latent Space of GANs for Semantic Face Editing](https://arxiv.org/pdf/1907.10786.pdf).\n\n\n{{< video https://www.youtube.com/embed/uoftpl3Bj6w >}}\n\n\n\nHere's the implementation\n\n```python\n# Again, this is not a full implementation\n# The images we will work with now are RGB\nimport torch\n\nz_dim = 64\nbatch_size = 128\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nn_classes = 40\n\ngen = Generator(z_dim).to(device)\n# Magically train the model or load a pretrained one\n# Put the pretrained model on evaluation mode\ngen.eval()\n\n# Defined class Classifier above\nclassifier = Classifier(n_classes=n_classes).to(device)\n# Really load a pretrained model. Look for details at https://pytorch.org/tutorials/beginner/saving_loading_models.html\nclass_dict = torch.load(\"pretrained_classifier.pth\", map_location=torch.device(device))[\"classifier\"]\nclassifier.load_state_dict(class_dict)\nclassifier.eval()\n\n# Here is the optimizer. We have frozen the weight of the classifier with .eval()\n# so only the noise gets updated.\nopt = torch.optim.Adam(classifier.parameters(), lr=0.01)\n\n# Gradient ascent for the noise\ndef calculate_updated_noise(noise, weight):\n    '''\n    Update and return the noise vector with gradient ascent\n    :param noise: the old noise vector \n    :param weight: the weights to update each noise value. An analogy\n                   to the learning rate, but for each noise value\n    :return: the updated noise vector\n    '''\n    return noise + ( noise.grad * weight)\n\n# Regularization for disentanglement - and also the scoring function to update noise\ndef get_score(current_classifications, original_classifications, target_indices, other_indices, penalty_weight):\n    '''\n    Function to get the score of the update. Reward change in the target feature(s) to\n    change and penalize changes in other features.\n    :param current_classifications: the classifications associated with the current noise\n    :param original_classifications: the classifications associated with the original noise     \n    :param target_indices: the index of the target feature\n    :param other_indices: the indices of the other features\n    :param penalty_weight: the amount that the penalty should be weighted in the overall score\n\n    :return: the score for the current update. \n    '''\n    # Penalize change in other features\n    other_distances = current_classifications[:,other_indices] - original_classifications[:,other_indices]\n    other_class_penalty = -torch.norm(other_distances, dim=1).mean() * penalty_weight\n    \n    # Reward change in the target feature(s)\n    target_score = current_classifications[:, target_indices].mean()\n    return target_score + other_class_penalty\n\n### Generation time!\n# The dataset of choice was CelebA, and here's the list of feature\nfeature_names = [\"5oClockShadow\", \"ArchedEyebrows\", \"Attractive\", \"BagsUnderEyes\", \"Bald\", \"Bangs\",\n\"BigLips\", \"BigNose\", \"BlackHair\", \"BlondHair\", \"Blurry\", \"BrownHair\", \"BushyEyebrows\", \"Chubby\",\n\"DoubleChin\", \"Eyeglasses\", \"Goatee\", \"GrayHair\", \"HeavyMakeup\", \"HighCheekbones\", \"Male\", \n\"MouthSlightlyOpen\", \"Mustache\", \"NarrowEyes\", \"NoBeard\", \"OvalFace\", \"PaleSkin\", \"PointyNose\", \n\"RecedingHairline\", \"RosyCheeks\", \"Sideburn\", \"Smiling\", \"StraightHair\", \"WavyHair\", \"WearingEarrings\", \n\"WearingHat\", \"WearingLipstick\", \"WearingNecklace\", \"WearingNecktie\", \"Young\"]\n\ngrad_steps = 10\nfake_image_history = []\n\ntarget_indices = feature_names.index(\"Smiling\") # Feel free to change this value\nother_indices = [cur_idx != target_indices for cur_idx, _ in enumerate(feature_names)]\nnoise = get_noise(n_images, z_dim).to(device).requires_grad_() # Must have grad for gradient ascent\noriginal_classifications = classifier(gen(noise)).detach() # But we don't need gradients for classifier\n\nfor i in range(grad_steps):\n    # Empty the optimizer\n    opt.zero_grad()\n\n    # Generate a batch of fake examples\n    # and add to history\n    fake = gen(noise)\n    fake_image_history += [fake]\n\n    # Calculate scoring function\n    fake_score = get_score(\n        classifier(fake), \n        original_classifications,\n        target_indices,\n        other_indices,\n        penalty_weight=0.1\n    )\n    fake_score.backward() # Automatically calculate noise gradients\n    noise.data = calculate_updated_noise(noise, 1 / grad_steps)\n```\n\nHere is a `fake_image_history` for training for feature `\"Smiling\"`:\n\n![](celeb example.png)\n\nThe faces looked distorted. There's no denying it. The reason may be correlation between features. For example, the model may not be able to generate a smiling face without creating one with a slightly open mouth. Moreover, the model may modify *unlabeled* features while modifying the target feature(s) and we cannot penalize them with this method.\n\n# Conclusion\nLet's compare Conditional and Controllable Generation. For Conditional Generation, we want *a specific class*, while for Controllable Generation, we want *a specific feature* for the output. Secondly, if data for Conditional Generation must contain class information, data for Controllable Generation must contain the feature(s) that we want (we cannot get matcha cookie from if we don't have matcha powder); however, the data now do not need labeling. In both ways, we influence the input by the noise vector $z$, but if we concatenate it with class information before, now we try to directly modify the noise vector.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}