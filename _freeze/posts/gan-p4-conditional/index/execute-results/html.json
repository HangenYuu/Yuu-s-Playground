{
  "hash": "8c4934e2508cdea307788c03435a9e00",
  "result": {
    "markdown": "---\ntitle: Conditional GAN\nsubtitle: My notes on taking the specialization by deeplearning.ai series\nauthor: Pham Nguyen Hung\ndraft: false\ndate: '2023-02-12'\ncategories:\n  - code\n  - GAN\nformat:\n  html:\n    toc: true\n    code-fold: true\n---\n\nApologize for being late: it has been nearly 3 weeks already since the latest post. But I am back for the last week of content.\n\nWhen I started writing, it was near the time to bed, and without a doubt, I am hungry. So let's deal with cookies this time.\n\nUp until now, our GAN has managed to do some interesting stuff (\"writing\" Kanji characters, or numbers, if you used the traditional MNIST dataset). However, one thing you must notice is that we have *no control over what the Generator will give us*. It can be a \"na\", it can be a \"tsu\", it can be a \"ki\" - no control whatsoever. In our cookie analogy, or cookanalogy, our current is like a goodwilled roomie who bakes for us every day, but each day we will receive a random cookie type.\n\n![*You know it is cookie, but you have no idea what type is it*](cookie 1.png)\n\nNow, if you love randomness and can tolerate the taste as well as the sugar, fine. But we usually want our model to be controllable, that is, we get to decide, or at least influence, what will be included in the output.\n\n![*It's much nicer to control that you have matcha on Monday, chocochip on Tuesday, and so on.*](cookie 2.png)\n\nWith the objective set, let's explore way to implement conditional GANs a.k.a way to make sure we have the correct cookie each day.\n\n# Limiting to just one category:\n\nThis is a no-brainer solution. To prevent random category generation (and mode collapse as well), who don't just feed in variational data of a single class only? In our cookanalogy, it is like always mixing matcha powder into the dough to make the cookies. Being an inexperienced chef and afraid of being cause, we sneak matcha powder in inconsistently between the days, but we are sure that every day we will get matcha cookies.\n\n![*A matcha cookie junkie's dream. (Anyone else besides me?)*](cookie 3.png)\n\nObviously this solution is for when you want to generate examples of one class only. One example would be augmenting data for brain EMR of a certain disease at a certain region. The other ~~trolled~~ example is [GANyu](https://www.kaggle.com/datasets/andy8744/ganyu-genshin-impact-anime-faces-gan-training), a dataset and models fine-tuned on it for the task of generating faces of the Genshin Impact character Ganyu (Check out the [GA(N)Rem](https://www.kaggle.com/datasets/andy8744/rezero-rem-anime-faces-for-gan-training) as well).\n\n> I don't know what is the thing for animes and GANs, but the moment I discovered GANs, I instantly thought of generating anime girls' faces. Is is the same phenomenon as researchers in the 90's instantly thought of classifying cat from everything else the moment they got a decent classifier... - A certain unfamous author on the web\n\n# Conditional GANs (Conditional inputs):\n\nOne thing that we must make clear for our GAN: we cannot generate examples of something that is not in the training data. So first, we must ensure the thing that we want (matcha cookie) is in the training data (ingredients) fed to our two networks.\n\nNext, we must be able to call on the Generator to produce what we want. This means that the data needs labelling. Simply put, the Discriminator needs to learn what a \"matcha cookie\" looks like before it can give any meaningful feedback - constrast between an original image and a generated one - to the Generator; the Generator also needs to know that the class it is generating to update the parameters accordingly. After training finishes, we can tell the Generator which class we want it to produce, and, voil√†! A solution to achieve this was proposed in the [Conditional Generative Adversarial Nets](https://arxiv.org/pdf/1411.1784.pdf) by passing some extra information $y$ (the easiest is class labels, possibly as one-hot vector) to both Generator and Discriminator.\n\n![*An input vector to Generator now is made up of two components: noise inputs (to ensure that each generation will be unique) & one-hot class vector (to ensure that the generate example will be of the class we want)*](cgan 1.png)\n\n![*Similarly, an input to the Discriminator now is an image together with the an one-hot class vector. For an example to be regarded as real, not only it needs to look realistic (reflected by a low binary corss-entropy or Wasserstein loss) but it also needs to look like examples from the same class. Here, an original matcha cookie definitely looks like a matcha cookie.*](cgan 2.png)\n\n![*Here is the earlier generated matcha cookie. Let's say that our Discriminator is a bit better than the Generator. It means that it will detect this looks rather like a matcha cookie, but not too alike.*](cgan 3.png)\n\n![*Now suppose that the required class is black chocochip, but our Generator gives a matcha cookie. The Discriminator will recognize in this case and gives a low chance that the example is real.*](cgan 4.png)\n\nThe question now is how do we go on implementing this? From the descriptions, it seems that we need to do 2 things: 1) figure a way to pass the additional information into our two models and 2) update the loss function. However, we just need to do 1), as the same loss function (binary cross-entropy) can be used, we just need to make sure that the class of the examples are included in the output as well. For Generator, you just need to concatenate it with the noise vector above. For Discriminator, it is a bit trickier. We feed the images in by passing values of three channels, so the simplest way will be to create n channels more for n classes. This way works for dataset such as the good ol' MNIST, whether we flatten out images before concatentating or we keep the same matrix and just call `torch.cat()` (which will create 10 more channels, each of size 28*28, with one of them full of 1 and the rest full of 0). For larger images or ones we cannot/do not want to flatten, this simple approach will create a huge memory issue. We will want to pass class information in a different, such as via a different head of input layer. Here are the code snippets.\n\n```python\nimport torch\nimport torch.nn.functional as F\n\ndef get_one_hot_labels(labels: torch.Tensor, n_classes: int):\n    '''\n    Function for creating one-hot vectors for the data.\n\n    :param labels: a vector containing the labels of all examples in a batch.\n                   Get from each DataLoader. Have shape (n_samples, 1)\n    :param n_classes: an integer for number of classes in the data.\n                      Get from the dataset created\n    :return: the one-hot vector for a batch of data\n    '''\n    return F.one_hot(labels,n_classes)\n\ndef combine_vectors(x, y):\n    '''\n    Generic function for combining two 2-D maxtrices with the same 0-shape\n    In our case, they will be (n_samples, x_1) and (n_samples, y_1).\n\n    :param x: the first matrix, shape (n_samples, x_1)\n    :param y: the second matrix, shape (n_samples, y_1)\n    :return: the concatenated matrix of shape (n_samples, x_1 + y_1)\n    '''\n    # To ensure unity of data types, we want the return matrix to have float\n    # type.\n    combined = torch.cat((x.float(),y.float()), 1)\n    return combined\n```\n\n```python\n# Code will not run if just copy-paste\n# Pre-training\n# Just the basic part.\nmnist_shape = (1, 28, 28)\nn_classes = 10\n\ndevice = 'cuda' if torch.cuda.available() else 'cpu'\ncriterion = nn.BCEWithLogitsLoss()\nz_dim = 64 # Size of the noise vector\ngen = Generator(input_dim=generator_input_dim).to(device)\ngen_opt = torch.optim.Adam(gen.parameters(), lr=lr)\ndisc = Discriminator(im_chan=discriminator_im_chan).to(device)\ndisc_opt = torch.optim.Adam(disc.parameters(), lr=lr)\nepochs = 200\n\ndef weights_init(m):\n    if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):\n        torch.nn.init.normal_(m.weight, 0.0, 0.02)\n    if isinstance(m, nn.BatchNorm2d):\n        torch.nn.init.normal_(m.weight, 0.0, 0.02)\n        torch.nn.init.constant_(m.bias, 0)\ngen = gen.apply(weights_init)\ndisc = disc.apply(weights_init)\n\n# Training loop\ncur_step = 0\ngenerator_losses = []\ndiscriminator_losses = []\n\nfor epoch in range(epochs):\n    for real, labels in tqdm(dataloader):\n        n_samples = len(real)\n        real = real.to(device)\n\n        # Get image one-hot labels for this batch\n        one_hot_labels = get_one_hot_labels(labels.to(device), n_classes)\n        # Remember that the DataLoader is in size (n_samples, 1, 28, 28) while the one hot label matrix \n        # has size (n_samples, 1). We need to extend 2 more dimensions if we want to concatenate the two.\n        image_one_hot_labels = one_hot_labels[:, :, None, None]\n        # Now the one-hot labels matrix has size (n_samples, 1, 1, 1). We need to turn it into\n        # (n_samples, 1, 28, 28) to pass into the input layer.\n        image_one_hot_labels = image_one_hot_labels.repeat(1, 1, mnist_shape[1], mnist_shape[2])\n\n        ### Update discriminator\n        # Zero out the discriminator gradients\n        disc_opt.zero_grad()\n\n        # Get noise corresponding to the current batch_size \n        fake_noise = get_noise(n_samples, z_dim, device=device)\n        \n        # Combine the label and the noise and generate fake examples\n        noise_and_labels = combine_vectors(fake_noise, one_hot_labels)\n        fake = gen(noise_and_labels)\n\n        # Get Discriminator's predictiopn on the real and the fake examples\n        fake_image_and_labels = combine_vectors(fake, image_one_hot_labels)\n        real_image_and_labels = combine_vectors(real, image_one_hot_labels)\n        disc_fake_pred = disc(fake_image_and_labels.detach()) # do not update the Generator\n        disc_real_pred = disc(real_image_and_labels)\n\n        # Calculate loss\n        disc_fake_loss = criterion(disc_fake_pred, torch.zeros_like(disc_fake_pred))\n        disc_real_loss = criterion(disc_real_pred, torch.ones_like(disc_real_pred))\n        disc_loss = (disc_fake_loss + disc_real_loss) / 2\n\n        # Backpropagation\n        disc_loss.backward(retain_graph=True)\n\n        # Update the parameters\n        disc_opt.step()\n\n        # Keep track of the average discriminator loss for visualization\n        discriminator_losses += [disc_loss.item()]\n\n        ### Update generator\n        # Zero out the generator gradients\n        gen_opt.zero_grad()\n\n        # Regenerate the fake examples with gradients to update\n        fake_image_and_labels = combine_vectors(fake, image_one_hot_labels)\n        disc_fake_pred = disc(fake_image_and_labels)\n\n        # Calculate loss\n        gen_loss = criterion(disc_fake_pred, torch.ones_like(disc_fake_pred))\n\n        # Backpropgation\n        gen_loss.backward()\n\n        # Update the parameters\n        gen_opt.step()\n\n        # Keep track of the generator losses for visualization\n        generator_losses += [gen_loss.item()]\n```\n\n# Controllable Generation (Noise is not just noise):\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}